	<modification>
		<id><![CDATA[Add the ability to charge AvaTaxes]]></id>
		<version><![CDATA[1.0]]></version>
		<vqmver><![CDATA[2.4.1]]></vqmver>
		<author><![CDATA[Avalara]]></author>
		<file name="catalog/view/theme/default/template/checkout/cart.tpl">
			<operation>
				<search position="before" ><![CDATA[<div class="row"><?php echo $column_left; ?>]]></search>
				<add><![CDATA[<?php if(isset($ERROR_STATUS)) echo $ERROR_STATUS; ?>]]></add>
			</operation>
		</file>
		<file name="catalog/model/total/tax.php">				
			<operation>
				<search position="after" ><![CDATA[public function getTotal(&$total_data, &$total, &$taxes) {]]></search>
				<add><![CDATA[        $taxCount=0;

				/*if($this->config->get('config_avatax_tax_calculation'))
				{
					$title = 'Total Tax';
					//$avatax_taxname = $this->config->get('avataxname');
				}*/
				]]></add>
			</operation>
			<operation>
				<search position="after" offset="2" ><![CDATA[$total += $value;]]></search>
				<add><![CDATA[//}]]></add>			
			</operation>			
			 <operation>
				<search position="after" ><![CDATA[foreach ($taxes as $key => $value) {]]></search>
				<add><![CDATA[
				if($this->config->get('config_avatax_tax_calculation'))
				{
					//$title = $avatax_taxname[$taxCount]['name'];
					$title = 'Total Tax';	//It displays title on Checkout page - Step 6: Confirm Order
				}
				else
				{
					$title = $this->tax->getRateName($key);
				}
				]]></add>			
			</operation>
			<operation>
				<search position="replace" ><![CDATA[if ($value > 0) {]]></search>
				<add><![CDATA[if ($value >= 0) {]]></add>
			</operation>
			<operation>
				<search position="replace" ><![CDATA['title'      => $this->tax->getRateName($key),]]></search>
				<add><![CDATA['title'      => $title,]]></add>
			</operation>		
			<operation>
				<search position="after" ><![CDATA[$total += $value;]]></search>
				<add><![CDATA[                $taxCount++;]]></add>
			</operation>
		</file>
		<file name="catalog/controller/checkout/cart.php">				
			<operation>
				<search position="after" ><![CDATA[$taxes = $this->cart->getTaxes();]]></search>
				<add><![CDATA[$data['ERROR_STATUS'] = $this->tax->tax_address_error;]]></add>
			</operation>
		</file>
		
		<file name="admin/language/english/setting/setting.php">
			<operation>
				<search position="after"><![CDATA[$_['error_address']                    = 'Store Address must be between 10 and 256 characters!';]]></search>
				<add><![CDATA[
				$_['error_zone_id']			= 'State/Province is required!';
				$_['error_postal_code']		= 'Postal Code must be 5 characters!';
				$_['error_city']			= 'Store City required!';
				]]></add>
			</operation>
			<operation>
				<search position="replace"><![CDATA[$_['error_address']                    = 'Store Address must be between 10 and 256 characters!';]]></search>
				<add><![CDATA[$_['error_address']                = 'Store Address must be between 10 and 50 characters!';]]></add>
			</operation>

		</file>
		<file name="admin/model/setting/setting.php">
			<operation>
				<search position="after" offset="11" ><![CDATA[public function editSetting(]]></search>
				<add><![CDATA[
					if(isset($data["config_avatax_tax_calculation"]) && $data["config_avatax_tax_calculation"]==1)
					{
						$this->avataxAddFields();
					}
				]]></add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[public function deleteSetting(]]></search>
				<add><![CDATA[
			public function avataxAddFields() {
				//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
				//$query = mysql_query("SELECT avatax_paytax_document_id FROM `" . DB_PREFIX . "order`");

				$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "order` LIKE 'avatax_paytax_document_id'");
				if($result->num_rows == 0){
					$this->db->query("ALTER TABLE `" . DB_PREFIX . "order` ADD `avatax_paytax_document_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_transaction_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_error_message` TEXT NOT NULL, ADD `avatax_paytax_document_code` VARCHAR( 40 ) NOT NULL");
				}

				//Add one new field to Open Cart "order_status" table
				//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
				//$query_document_status = mysql_query("SELECT avatax_document_status FROM `" . DB_PREFIX . "order_status`");

				$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "order_status` LIKE 'avatax_document_status'");
				if($result->num_rows == 0){
					$this->db->query("ALTER TABLE `" . DB_PREFIX . "order_status` ADD `avatax_document_status` VARCHAR( 30 ) NOT NULL");
					$this->db->query("UPDATE `" . DB_PREFIX . "order_status` SET avatax_document_status = 'Uncommitted' where order_status_id in (1, 2)");
					$this->db->query("UPDATE `" . DB_PREFIX . "order_status` SET avatax_document_status = 'Committed' where order_status_id in (3, 5, 15)");
					$this->db->query("UPDATE `" . DB_PREFIX . "order_status` SET avatax_document_status = 'Voided' where order_status_id in (7, 8, 9, 10, 11, 12, 13, 14, 16)");
				}

				//Add one new field to Open Cart "return" table
				//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
				//$query_return = mysql_query("SELECT avatax_return_document_code FROM `" . DB_PREFIX . "return`");

				$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "return` LIKE 'avatax_return_document_code'");
				if($result->num_rows == 0){
					$this->db->query("ALTER TABLE `" . DB_PREFIX . "return` ADD `avatax_return_document_code` VARCHAR( 10 ) NOT NULL");
				}
			}
				]]></add>
			</operation>
		</file>
		<file name="admin/controller/setting/setting.php">
			<operation>
				<search position="replace"><![CDATA[if ((utf8_strlen($this->request->post['config_address']) < 3) || (utf8_strlen($this->request->post['config_address']) > 256))]]></search>
				<add><![CDATA[
				if ((utf8_strlen($this->request->post['config_address']) < 3) || (utf8_strlen($this->request->post['config_address']) > 64))
			]]></add>
			</operation>
			<operation>
				<search position="after" offset="1" ><![CDATA[$this->error['address'] = $this->language->get('error_address');]]></search>
				<add><![CDATA[
			if ((utf8_strlen($this->request->post['config_city']) < 3) || (utf8_strlen($this->request->post['config_city']) > 64)) {
				$this->error['city'] = $this->language->get('error_city');
			}
			if ((utf8_strlen($this->request->post['config_postal_code']) < 5) || (utf8_strlen($this->request->post['config_postal_code']) > 5)) {
				$this->error['postal_code'] = $this->language->get('error_postal_code');
			}

			if(isset($this->request->post['config_zone_id']) && !($this->request->post['config_zone_id']>0))
			{
				$this->error['zone_id'] = $this->language->get('error_zone_id');
			}
			]]></add>
			</operation>
			<operation>
				<search position="before" offset="1" ><![CDATA[if (isset($this->error['telephone'])) {]]></search>
				<add><![CDATA[
			if (isset($this->error['city'])) {
				$data['error_city'] = $this->error['city'];
			} else {
				$data['error_city'] = '';
			}
			if (isset($this->error['postal_code'])) {
				$data['error_postal_code'] = $this->error['postal_code'];
			} else {
				$data['error_postal_code'] = '';
			}
			if (isset($this->error['zone_id'])) {
				$data['error_zone_id'] = $this->error['zone_id'];
			} else {
				$data['error_zone_id'] = '';
			}
			]]></add>
			</operation>
			<operation>
				<search position="before"><![CDATA[if (isset($this->request->post['config_email'])) {]]></search>
				<add><![CDATA[
			if (isset($this->request->post['config_address_line2'])) {
				$data['config_address_line2'] = $this->request->post['config_address_line2'];
			} else {
				$data['config_address_line2'] = $this->config->get('config_address_line2');
			}

			if (isset($this->request->post['config_city'])) {
				$data['config_city'] = $this->request->post['config_city'];
			} else {
				$data['config_city'] = $this->config->get('config_city');
			}

			if (isset($this->request->post['config_state'])) {
				$data['config_state'] = $this->request->post['config_state'];
			} else {
				$data['config_state'] = $this->config->get('config_state');
			}

			if (isset($this->request->post['config_country'])) {
				$data['config_country'] = $this->request->post['config_country'];
			} else {
				$data['config_country'] = $this->config->get('config_country');
			}

			if (isset($this->request->post['config_postal_code'])) {
				$data['config_postal_code'] = $this->request->post['config_postal_code'];
			} else {
				$data['config_postal_code'] = $this->config->get('config_postal_code');
			}
			]]></add>
			</operation>
			<operation>
				<search position="before"><![CDATA[if (isset($this->request->post['config_tax_customer'])) {]]></search>
				<add><![CDATA[
			if (isset($this->request->post['config_avatax_account'])) {
				$data['config_avatax_account'] = $this->request->post['config_avatax_account'];
			} else {
				$data['config_avatax_account'] = $this->config->get('config_avatax_account');
			}

			if (isset($this->request->post['config_avatax_license_key'])) {
				$data['config_avatax_license_key'] = $this->request->post['config_avatax_license_key'];
			} else {
				$data['config_avatax_license_key'] = $this->config->get('config_avatax_license_key');
			}

			if (isset($this->request->post['config_avatax_client'])) {
				$data['config_avatax_client'] = $this->request->post['config_avatax_client'];
			} else {
				$data['config_avatax_client'] = $this->config->get('config_avatax_client');
			}

			if (isset($this->request->post['config_avatax_service_url'])) {
				$data['config_avatax_service_url'] = $this->request->post['config_avatax_service_url'];
			} else {
				$data['config_avatax_service_url'] = $this->config->get('config_avatax_service_url');
			}

			if (isset($this->request->post['config_avatax_taxcall_flag'])) {
				$data['config_avatax_taxcall_flag'] = $this->request->post['config_avatax_taxcall_flag'];
			} else {
				$data['config_avatax_taxcall_flag'] = $this->config->get('config_avatax_taxcall_flag');
			}
			if (isset($this->request->post['config_avatax_transaction_calculation'])) {
				$data['config_avatax_transaction_calculation'] = $this->request->post['config_avatax_transaction_calculation'];
			} else {
				$data['config_avatax_transaction_calculation'] = $this->config->get('config_avatax_transaction_calculation');
			}
			
			if (isset($this->request->post['config_avatax_log'])) {
				$data['config_avatax_log'] = $this->request->post['config_avatax_log'];
			} else {
				$data['config_avatax_log'] = $this->config->get('config_avatax_log');
			}

			//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number
			if (isset($this->request->post['config_avatax_product_code'])) {
				$data['config_avatax_product_code'] = $this->request->post['config_avatax_product_code'];
			} else {
				$data['config_avatax_product_code'] = $this->config->get('config_avatax_product_code');
			}

			if (isset($this->request->post['config_avatax_company_code'])) {
				$data['config_avatax_company_code'] = $this->request->post['config_avatax_company_code'];
			} else {
				$data['config_avatax_company_code'] = $this->config->get('config_avatax_company_code');
			}

			if (isset($this->request->post['config_avatax_tax_calculation'])) {
				$data['config_avatax_tax_calculation'] = $this->request->post['config_avatax_tax_calculation'];
			} else {
				$data['config_avatax_tax_calculation'] = $this->config->get('config_avatax_tax_calculation');
			}

			if (isset($this->request->post['config_avatax_tax_address_validation'])) {
				$data['config_avatax_tax_address_validation'] = $this->request->post['config_avatax_tax_address_validation'];
			} else {
				$data['config_avatax_tax_address_validation'] = $this->config->get('config_avatax_tax_address_validation');
			}

			/*if (isset($this->request->post['config_avatax_us_canada_only'])) {
				$data['config_avatax_us_canada_only'] = $this->request->post['config_avatax_us_canada_only'];
			} else {
				$data['config_avatax_us_canada_only'] = $this->config->get('config_avatax_us_canada_only');
			}*/

			if (isset($this->request->post['config_avatax_validate_address_in'])) {
				$data['config_avatax_validate_address_in'] = $this->request->post['config_avatax_validate_address_in'];
			} else {
				$data['config_avatax_validate_address_in'] = $this->config->get('config_avatax_validate_address_in');
			}
			]]></add>
			</operation>
		</file>
		
		<file name="admin/view/template/setting/setting.tpl">	
			<operation>
				<search position="replace" ><![CDATA[name="config_name"]]></search>
				<add><![CDATA[name="config_name" id="config_name"]]></add>
			</operation>
			<operation>
				<search position="replace" offset="4" ><![CDATA[<label class="col-sm-2 control-label" for="input-zone"><?php echo $entry_zone; ?></label>]]></search>
				<add><![CDATA[]]></add>
			</operation>
			<operation>
				<search position="replace" offset="11" ><![CDATA[<label class="col-sm-2 control-label" for="input-country"><?php echo $entry_country; ?></label>]]></search>
				<add><![CDATA[]]></add>
			</operation>		
			<operation>
				<search position="replace" ><![CDATA[<textarea name="config_address" placeholder="<?php echo $entry_address; ?>" rows="5" id="input-address" class="form-control"><?php echo $config_address; ?></textarea>]]></search>
				<add><![CDATA[
				<input type="text" name="config_address" id="config_address" class="form-control" value="<?php echo $config_address; ?>" size="40" />
				]]></add>
			</operation>	
			<operation>
				<search position="before" offset="1" ><![CDATA[<label class="col-sm-2 control-label" for="input-email"><?php echo $entry_email; ?></label>]]></search>
				<add><![CDATA[
				<div class="form-group">
				  <label class="col-sm-2 control-label" for="config_address_line2">Address Line 2</label>
					<div class="col-sm-10">
					  <input type="text" name="config_address_line2" value="<?php echo $config_address_line2; ?>" placeholder="Address Line 2" id="config_address_line2" class="form-control" />
					</div>
				  </div>
				
				  
				  <div class="form-group required">
					<label class="col-sm-2 control-label" for="config_city">City:</label>
					<div class="col-sm-10">
					  <input type="text" name="config_city" value="<?php echo $config_city; ?>" placeholder="City" id="config_city" class="form-control" />
					  <?php if ($error_city) { ?>
					  <div class="text-danger"><?php echo $error_city; ?></div>
					  <?php } ?>
					</div>
				  </div>
				  
				  <div class="form-group">
					<label class="col-sm-2 control-label" for="input-country"><?php echo $entry_country; ?></label>
					<div class="col-sm-10">
					  <select name="config_country_id" id="input-country" class="form-control">
						<?php foreach ($countries as $country) { ?>
						<?php if ($country['country_id'] == $config_country_id) { ?>
						<option value="<?php echo $country['country_id']; ?>" selected="selected"><?php echo $country['name']; ?></option>
						<?php } else { ?>
						<option value="<?php echo $country['country_id']; ?>"><?php echo $country['name']; ?></option>
						<?php } ?>
						<?php } ?>
					  </select>
					</div>
				  </div>
				  <div class="form-group">
					<label class="col-sm-2 control-label" for="input-zone"><?php echo $entry_zone; ?></label>
					<div class="col-sm-10">
					  <select name="config_zone_id" id="input-zone" class="form-control">
					  </select>
					</div>
				  </div>
				  
				   <div class="form-group required">
					<label class="col-sm-2 control-label" for="config_postal_code">Postal Code:</label>
					<div class="col-sm-10">
					  <input type="text" name="config_postal_code" value="<?php echo $config_postal_code; ?>" placeholder="Postal Code" id="config_postal_code" class="form-control" />
					  <?php if ($error_postal_code) { ?>
					  <div class="text-danger"><?php echo $error_postal_code; ?></div>
					  <?php } ?>
					</div>
				  </div>
							
				]]></add>
			</operation>
			<operation>
				<search position="after" ><![CDATA[<li><a href="#tab-option" data-toggle="tab"><?php echo $tab_option; ?></a></li>]]></search>
				<add><![CDATA[<li><a href="#tab-avalara" data-toggle="tab">Avalara</a></li>]]></add>
			</operation>
			<operation>
				<search position="before"><![CDATA[<div class="tab-pane" id="tab-image">]]></search>
				<add><![CDATA[
					<div class="tab-pane" id="tab-avalara">
						<fieldset>
						<legend><?php echo "Avalara Credentials"; ?></legend>
				
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_account">Account Number:</label>
							<div class="col-sm-10">
								<input type="text" name="config_avatax_account" value="<?php echo $config_avatax_account; ?>" placeholder="Account Number" id="config_avatax_account" class="form-control" />
							</div>
						</div>
				
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_license_key">License Key:</label>
							<div class="col-sm-10">
								<input type="text" name="config_avatax_license_key" value="<?php echo $config_avatax_license_key; ?>" placeholder="License Key" id="config_avatax_license_key" class="form-control" />
							</div>
						</div>
				
						<?php $version = "OpenCart||".VERSION."||02.00.02.00";	?>
						<input type="hidden" name="config_avatax_client" value="<?=$version?>" id="config_avatax_client" />
				
						<div class="form-group">
							<label class="col-sm-2 control-label" for="input-country">Service URL:</label>
							<div class="col-sm-10">
								<select name="config_avatax_service_url" id="config_avatax_service_url" class="form-control">
								<?php if($config_avatax_service_url=='https://development.avalara.net')	{	?>
									<option value="https://development.avalara.net" selected="selected">https://development.avalara.net</option>
									<option value="https://avatax.avalara.net">https://avatax.avalara.net</option>
								<?php	}	else	{	?>
									<option value="https://development.avalara.net">https://development.avalara.net</option>
									<option value="https://avatax.avalara.net" selected="selected">https://avatax.avalara.net</option>
								<?php	}	?>
								  </select>
							</div>
						</div>
		
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_company_code">Company Code:</label>
							<div class="col-sm-10">
							  <input type="text" name="config_avatax_company_code" value="<?php echo $config_avatax_company_code; ?>" placeholder="Company Code:" id="config_avatax_company_code" class="form-control" />
							</div>
						</div>
						
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_service_url">Make a test call to the AvaTax Service:</label>
							<div class="col-sm-10"><br>
							  <a href="javascript:;" id="AvaTaxTestConnection" ><img src="view/image/Avatax_test_connection.png" title="AvaTax Tax - Test Connection" alt="AvaTax Tax - Test Connection" /></a>
							</div>
						</div>
						
						<div class="form-group">&nbsp;</div>
						</fieldset>
						
						<fieldset>
						<legend><?php echo "Tax Calculation Settings"; ?></legend>

						<div class="form-group">
							  <label class="col-sm-2 control-label">Enable AvaTax tax calculation:</label>
							  <div class="col-sm-10">
								<label class="radio-inline">
								  <?php if ($config_avatax_tax_calculation) { ?>
								  <input type="radio" name="config_avatax_tax_calculation" id="config_avatax_tax_calculation_yes" value="1" checked="checked" />
								  <?php echo $text_yes; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_tax_calculation" id="config_avatax_tax_calculation_yes" value="1" />
								  <?php echo $text_yes; ?>
								  
								  <?php } ?>
								</label>
								<label class="radio-inline">
								  <?php if (!$config_avatax_tax_calculation) { ?>
								  <input type="radio" name="config_avatax_tax_calculation" id="config_avatax_tax_calculation_no" value="0" checked="checked" />
								  <?php echo $text_no; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_tax_calculation" id="config_avatax_tax_calculation_no" value="0" />
								  <?php echo $text_no; ?>
								  <?php } ?>
								</label>
							</div>
						</div>
							
						<div class="form-group">
							  <label class="col-sm-2 control-label">Enable AvaTax address validation:</label>
							  <div class="col-sm-10">
								<label class="radio-inline">
								  <?php if ($config_avatax_tax_address_validation) { ?>
								  <input type="radio" name="config_avatax_tax_address_validation"  value="1" checked="checked" />
								  <?php echo $text_yes; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_tax_address_validation" value="1" />
								  <?php echo $text_yes; ?>
								  
								  <?php } ?>
								</label>
								<label class="radio-inline">
								  <?php if (!$config_avatax_tax_address_validation) { ?>
								  <input type="radio" name="config_avatax_tax_address_validation" value="0" checked="checked" />
								  <?php echo $text_no; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_tax_address_validation" value="0" />
								  <?php echo $text_no; ?>
								  <?php } ?>
								</label>
							</div>
						</div>
							
						<div class="form-group">
							<label class="col-sm-2 control-label">Do you want save transaction on AvaTax:</label>
							<div class="col-sm-10">
								<label class="radio-inline">
								  <?php if ($config_avatax_transaction_calculation) { ?>
								  <input type="radio" name="config_avatax_transaction_calculation" id="config_avatax_transaction_calculation" value="1" checked="checked" />
								  <?php echo $text_yes; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_transaction_calculation" id="config_avatax_transaction_calculation" value="1" />
								  <?php echo $text_yes; ?>
								  
								  <?php } ?>
								</label>
								<label class="radio-inline">
								  <?php if (!$config_avatax_transaction_calculation) { ?>
								  <input type="radio" name="config_avatax_transaction_calculation" id="config_avatax_transaction_calculation" value="0" checked="checked" />
								  <?php echo $text_no; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_transaction_calculation" id="config_avatax_transaction_calculation" value="0" />
								  <?php echo $text_no; ?>
								  <?php } ?>
								</label>
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-2 control-label">Enable Log:</label>
							<div class="col-sm-10">
								<label class="radio-inline">
								  <?php if ($config_avatax_log) { ?>
								  <input type="radio" name="config_avatax_log" id="config_avatax_log" value="1" checked="checked" />
								  <?php echo $text_yes; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_log" id="config_avatax_log" value="1" />
								  <?php echo $text_yes; ?>
								  
								  <?php } ?>
								</label>
								<label class="radio-inline">
								  <?php if (!$config_avatax_log) { ?>
								  <input type="radio" name="config_avatax_log" id="config_avatax_log" value="0" checked="checked" />
								  <?php echo $text_no; ?>
								  <?php } else { ?>
								  <input type="radio" name="config_avatax_log" id="config_avatax_log" value="0" />
								  <?php echo $text_no; ?>
								  <?php } ?>
								</label>
							</div>
						</div>
							
						<div class="form-group">
							<label class="col-sm-2 control-label">Send Model Number/UPC/SKU to AvaTax:</label>
							<div class="col-sm-10">
							  <label class="radio-inline">	
								<?php if (($config_avatax_product_code<>"UPC") && ($config_avatax_product_code<>"SKU")) { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="Model" checked="checked" />
								<?php echo "Model"; ?>
								<?php } ?>
								<?php if ($config_avatax_product_code=="UPC") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="Model" />
								<?php echo "Model"; ?>
								<?php } ?>
								<?php if ($config_avatax_product_code=="SKU") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="Model" />
								<?php echo "Model"; ?>
								<?php } ?>
							  </label>
							  <label class="radio-inline">
								<?php if ($config_avatax_product_code=="UPC") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="UPC" checked="checked"/>
								<?php echo "UPC"; ?>
								<?php } ?>
								<?php if (($config_avatax_product_code<>"UPC") && ($config_avatax_product_code<>"SKU")) { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="UPC" />
								<?php echo "UPC"; ?>
								<?php } ?>
								<?php if ($config_avatax_product_code=="SKU") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="UPC" />
								<?php echo "UPC"; ?>
								<?php } ?>
							  </label>
							  <label class="radio-inline">
								<?php if ($config_avatax_product_code=="SKU") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="SKU" checked="checked" />
								<?php echo "SKU"; ?>
								<?php } ?>
								<?php if (($config_avatax_product_code<>"UPC") && ($config_avatax_product_code<>"SKU")) { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="SKU" />
								<?php echo "SKU"; ?>
								<?php } ?>
								<?php if ($config_avatax_product_code=="UPC") { ?>
								<input type="radio" name="config_avatax_product_code" id="config_avatax_product_code" value="SKU" />
								<?php echo "SKU"; ?>
								<?php } ?>
								</label>
								&nbsp;&nbsp;<img src="../image/question.jpg" title="If UPC/SKU is not available then Model Number will be sent to AvaTax by default">
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label" for="input-country">Only Validate addresses in:</label>
							<div class="col-sm-10">
							  <select name="config_avatax_validate_address_in" class="form-control">
								<?php  if ($config_avatax_validate_address_in == 'US') { ?>
							  <option value="US" selected="selected">USA</option>
							  <option value="CA">Canada</option>
							  <option value="both">Both</option>
							  <?php } else if ($config_avatax_validate_address_in == 'CA') { ?>
							  <option value="US">USA</option>
							  <option value="CA" selected="selected">Canada</option>
							  <option value="both">Both</option>
							  <?php } else if ($config_avatax_validate_address_in == 'both') { ?>
							  <option value="US">USA</option>
							  <option value="CA">Canada</option>
							  <option value="both" selected="selected">Both</option>
							  <?php } else { ?>
							  <option value="US">USA</option>
							  <option value="CA">Canada</option>
							  <option value="both" selected="selected" >Both</option>
							  <?php } ?>
							  </select>
							</div>
						</div>
						  
						
						
						
						
						<div class="form-group">
							<div class="col-sm-10">
							  <input type="hidden" name="config_avatax_taxcall_flag" id="config_avatax_taxcall_flag" value="0" />
							</div>
						</div>
						
						 <div class="form-group">
							<div class="col-sm-10">
								<div id="AvaTaxTestConnectionDialog" title="AvaTax Test Connection" style="display:none;"></div>
						   </div>
						  </div>

						<div class="form-group">
							<div class="col-sm-10">
							  <input type="hidden" name="EnableAvaTaxValidation" id="EnableAvaTaxValidation"  />
							</div>
						</div>
					</fieldset>

					<fieldset>
					<legend><?php echo "Avalara Details"; ?></legend>
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_details">About Avalara:</label>
							<div class="col-sm-10" style="margin-top:10px">Copyright &copy; 2015 Avalara, Inc. All Rights Reserved.
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_details">AvaTax Version:</label>
							<div class="col-sm-10" style="margin-top:10px"><?php echo $version; ?>
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_details">Email:</label>
							<div class="col-sm-10" style="margin-top:10px"><a href="support@avalara.com">support@avalara.com</a>
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_details">Phone:</label>
							<div class="col-sm-10" style="margin-top:10px">(877)-780-4848
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label" for="config_avatax_service_url">AvaTax Admin Console link:</label>
							<div class="col-sm-10" style="margin-top:10px">
							  <a href="https://admin-avatax.avalara.net/login.aspx" id="AvaTax Production Admin Console" target="_blank">Click Here for AvaTax Production Admin Console</a>
							</div>
						</div>
					</fieldset>
				</div>
			  ]]></add>
			</operation>
			<operation>
				<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>            
				<add><![CDATA[
		<script type="text/javascript" src="view/javascript/jquery/jquery-1.7.1.min.js"></script>
	<script type="text/javascript" src="view/javascript/jquery/ui/jquery-ui-1.8.16.custom.min.js"></script>

	<script type="text/javascript">
	var jQuery_1_8_16 = $.noConflict(true);
	</script>

	<link type="text/css" href="view/javascript/jquery/ui/themes/ui-lightness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
					
		<script type="text/javascript"><!--
			$('#config_avatax_tax_calculation_yes').click(function() {
				
				if($("#config_avatax_account").val()=="") {
					alert("AvaTax Account Number should not empty.");
					$("#config_avatax_tax_calculation_no").prop("checked", true);
					$("#config_avatax_account").focus();				
				}
				else if($("#config_avatax_license_key").val()=="") {
					alert("AvaTax License Key should not empty.");
					$("#config_avatax_tax_calculation_no").prop("checked", true);
					$("#config_avatax_license_key").focus();
				}
				else if($("#config_avatax_service_url").val()=="") {
					alert("AvaTax Service URL should not empty.");
					$("#config_avatax_tax_calculation_no").prop("checked", true);
					$("#config_avatax_service_url").focus();
				}
				else if($("#config_avatax_company_code").val()=="") {
					alert("AvaTax Company Code should not empty.");
					$("#config_avatax_tax_calculation_no").prop("checked", true);
					$("#config_avatax_company_code").focus();
				}	
				if(($("#config_address").val()=="") || ($("#config_city").val()=="") ||($("#config_country_id").val()=="") ||($("#config_zone_id").val()=="") ||($("#config_postal_code").val()==""))	
				{
					alert("Store Address Line 1, City, Country, Region and Postal Code are required!\n\n Without these values we are not enable the AvaTax Tax Calculation.\n\n So, Please make sure above mentioned fields are filled on the General Tab section.");				
					//$('#EnableAvaTaxValidation').html('Store Address Line 1, City, Country, Region and Postal Code are required!<br/> Without these values we are not enable the AvaTax Tax Calculation.<br/> So, Please make sure above mentioned fields are filled on the General Tab section.');
					//$('#EnableAvaTaxValidation').dialog();				
					$("#config_avatax_tax_calculation_no").prop("checked", true);
				}
			});

			$('#AvaTaxTestConnection').click(function() {
				if($("#config_avatax_account").val()=="") {
					alert("Please enter AvaTax Account Number!");
					$("#config_avatax_account").focus();
				}
				else if($("#config_avatax_license_key").val()=="") {
					alert("Please enter AvaTax License Key");
					$("#config_avatax_license_key").focus();
				}
				else if($("#config_avatax_service_url").val()=="") {
					alert("Please enter AvaTax Service URL");
					$("#config_avatax_service_url").focus();
				}
				else
				{
					jQuery_1_8_16('#AvaTaxTestConnectionDialog').html('<div style="text-align:center;padding-top:10px;"><img src="view/image/loading2.gif" border="0" alt="Work In Progress..." ><br/>Work In Progress...</div>');
					
					jQuery_1_8_16('#AvaTaxTestConnectionDialog').dialog();
					
					
					var accountVal = $("#config_avatax_account").val();
					var licenseVal = $("#config_avatax_license_key").val();
					var serviceURLVal = $("#config_avatax_service_url").val();
					var environment = "Development";
					var client = '<?="OpenCart||".VERSION."||02.00.02.00";?>';

					if($("#config_avatax_service_url").val()=="https://development.avalara.net")
						environment = "Development";
					else 
						environment = "Production";

	/**/$.post("<?php if ($config_secure) {echo str_replace("admin/","system/AvaTax4PHP/", HTTPS_SERVER);} else {echo str_replace("admin/","system/AvaTax4PHP/", HTTP_SERVER);}?>avatax_test_connection.php?from=AvaTaxConnectionTest&acc="+accountVal+"&license="+licenseVal+"&serviceurl="+serviceURLVal+"&environment="+ environment+"&client="+ client, {q: ""}, function(data){

						if(data.length >0) {
						//alert(data);
							jQuery_1_8_16('#AvaTaxTestConnectionDialog').html(data);
						}
					});

				}
			});
		//--></script>
				]]></add>
			</operation>
		</file>
		
		
		
		<file name="system/library/customer.php">
			<operation>
				<search position="after" offset="4" ><![CDATA[ public function getRewardPoints() { ]]></search>
				<add><![CDATA[
		public function getAddress($address_id) {
	$address_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "address WHERE address_id = '" . (int)$address_id . "'");

			if ($address_query->num_rows) {
				$country_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "country` WHERE country_id = '" . (int)$address_query->row['country_id'] . "'");

				if ($country_query->num_rows) {
					$country = $country_query->row['name'];
					$iso_code_2 = $country_query->row['iso_code_2'];
					$iso_code_3 = $country_query->row['iso_code_3'];
					$address_format = $country_query->row['address_format'];
				} else {
					$country = '';
					$iso_code_2 = '';
					$iso_code_3 = '';
					$address_format = '';
				}

				$zone_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "zone` WHERE zone_id = '" . (int)$address_query->row['zone_id'] . "'");

				if ($zone_query->num_rows) {
					$zone = $zone_query->row['name'];
					$zone_code = $zone_query->row['code'];
				} else {
					$zone = '';
					$zone_code = '';
				}

				return array(
					'address_id'     => $address_query->row['address_id'],
					'customer_id'    => $address_query->row['customer_id'],
					'firstname'      => $address_query->row['firstname'],
					'lastname'       => $address_query->row['lastname'],
					'company'        => $address_query->row['company'],
					'address_1'      => $address_query->row['address_1'],
					'address_2'      => $address_query->row['address_2'],
					'postcode'       => $address_query->row['postcode'],
					'city'           => $address_query->row['city'],
					'zone_id'        => $address_query->row['zone_id'],
					'zone'           => $zone,
					'zone_code'      => $zone_code,
					'country_id'     => $address_query->row['country_id'],
					'country'        => $country,
					'iso_code_2'     => $iso_code_2,
					'iso_code_3'     => $iso_code_3,
					'address_format' => $address_format
				);
			}
		}
			]]></add>
			</operation>
		</file>
		<file name="system/library/tax.php">
			<!--<operation>-->
			  <operation>
			  <search position="after" ><![CDATA[private $tax_rates = array();]]></search>
				<add><![CDATA[public $tax_address_error;
							  private $payment_address;
							  private $store_address;
				]]></add>			
			</operation>
			<operation>
			  <search position="after" ><![CDATA[public function setShippingAddress($country_id, $zone_id) {]]></search>
				<add><![CDATA[$this->shipping_address = array(
								'country_id' => $country_id,
								'zone_id'    => $zone_id
						);		
				]]></add>			
			</operation>
			<operation>
			  <search position="after" ><![CDATA[public function setPaymentAddress($country_id, $zone_id) {]]></search>
				<add><![CDATA[	$this->payment_address = array(
								'country_id' => $country_id,
								'zone_id'    => $zone_id
						);				
				]]></add>	
			</operation>		
			<operation>
			  <search position="after" ><![CDATA[public function setStoreAddress($country_id, $zone_id) {]]></search>
				<add><![CDATA[	$this->store_address = array(
								'country_id' => $country_id,
								'zone_id'    => $zone_id
			);
			]]></add>	
			</operation>
			<!-- Add it only for OpenCart 2.0.0.0. Below line is available OpenCart 2.0.0.0 onwards -->
			<operation>
			  <search position="after" ><![CDATA[$this->db = $registry->get('db');]]></search>
				<add><![CDATA[		$this->customer = $registry->get('customer');]]></add>	
			</operation>		
			<operation>
				<search position="before"><![CDATA[public function getRateName($tax_rate_id) {]]></search>
				<add><![CDATA[
		public function getCountry($country_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "country WHERE country_id = '" . (int)$country_id . "'");

			return $query->row;
		}

		public function getZone($zone_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "zone WHERE zone_id = '" . (int)$zone_id . "'");

			return $query->row;
		}

		public function getCategories($product_id) {
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category pc LEFT JOIN " . DB_PREFIX . "category_description cd ON (pc.category_id = cd.category_id) WHERE pc.product_id = '" . (int)$product_id . "'");

			$product_categories = "";
			foreach($query->rows as $row)
			{
				$product_categories .= $row["name"].", ";
			}
			//$product_categories = substr($product_categories, 0, (strlen($product_categories) - 2));
			//$product_categories = substr($product_categories, 0, 24);
			return $product_categories;
		}

		public function getProductOriginalPrice($product_id) {
			$product_price_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$product_id . "'");

			if ($product_price_query->num_rows) {
				$price = $product_price_query->row['price'];
			}

			return $price;
		}

		public function AvaTaxAmount($price) {
		
			require_once(VQMod::modCheck(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php'));

			global $registry;
			$this->cart = $registry->get('cart');

			$environment = 'Development';

			$service_url = $this->config->get('config_avatax_service_url');
			$account = $this->config->get('config_avatax_account');
			$license = $this->config->get('config_avatax_license_key');
			$client = $this->config->get('config_avatax_client');
			
			//echo "<br>Client Val: ";
			//print_r($client);

			if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
				$environment = "Development";
			else 
				$environment = "Production";

			new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));
		
			//Variable Mapping
			if(!isset($this->session->data['guest']))
			{
				$country_details = $this->getCountry($this->store_address['country_id']);
				$zone_details = $this->getZone($this->store_address['zone_id']);
				if(isset($this->shipping_address['country_id']))
				{
					$dest_country_details = $this->getCountry($this->shipping_address['country_id']);
					$dest_zone_details = $this->getZone($this->shipping_address['zone_id']);
				}
				else
				{
					$dest_country_details = $this->getCountry($this->payment_address['country_id']);
					$dest_zone_details = $this->getZone($this->payment_address['zone_id']);
				}
			}
			else
			{
				$guest = $this->session->data['guest'];
				$customer_group_id = $guest['customer_group_id'];
				$country_details = $this->getCountry($this->store_address['country_id']);
				$zone_details = $this->getZone($this->store_address['zone_id']);
				if(isset($guest['shipping']['country_id']))
				{
					$guest_address = $this->session->data['shipping_address'];
					 $dest_country_details = $this->getCountry($guest_address['country_id']);
					$dest_zone_details = $this->getZone($guest_address['zone_id']);
				}
				else
				{
					$guest_address = $this->session->data['payment_address'];
					$dest_country_details = $this->getCountry($guest_address['country_id']);
					$dest_zone_details = $this->getZone($guest_address['zone_id']);
				}
			}

			$CustomerCode = $this->config->get('config_account_id');
			$OrigAddress = $this->config->get('config_address');
			$OrigCity = $this->config->get('config_city');
			$OrigRegion = $zone_details["code"];
			$OrigPostalCode = $this->config->get('config_postal_code');
			$OrigCountry = $country_details["iso_code_2"];

			 if (($this->customer->isLogged()) && (isset($this->session->data['payment_address']['address_id']) || isset($this->session->data['shipping_address']['address_id']) || isset($this->customer->request->request['shipping_address_1']) || isset($this->customer->request->request['payment_address_1'])))  {

				//we will get shipping address only on admin side. during client side we will directly read the address
				if(!isset($this->customer->request->request['shipping_address']) || !isset($this->customer->request->request['payment_address']))
				{

					if(isset($this->session->data['shipping_address']['address_id']))
					{
						$customer_address = $this->customer->getAddress($this->session->data['shipping_address']['address_id']);
					}
					else
					{
						if(isset($this->session->data['payment_address']['address_id']))
						{
							$customer_address = $this->customer->getAddress($this->session->data['payment_address']['address_id']);
						}
					}
					
					if(isset($customer_address))
					{
						$DestAddress = $customer_address["address_1"];
						$DestCity = $customer_address["city"];
						$DestRegion = $customer_address["zone_code"];
						$DestPostalCode = $customer_address["postcode"];
						$DestCountry = $customer_address["iso_code_2"];
					}
				}
				else
				{
					if(isset($this->customer->request->request['shipping_address_1']) && $this->customer->request->request['shipping_address_1']!="")
					{
						$DestAddress = $this->customer->request->request['shipping_address_1'];
						$DestCity = $this->customer->request->request['shipping_city'];
						$DestPostalCode = $this->customer->request->request['shipping_postcode'];
					}
					else
					{
						$DestAddress = $this->customer->request->request['payment_address_1'];
						$DestCity = $this->customer->request->request['payment_city'];
						$DestPostalCode = $this->customer->request->request['payment_postcode'];
					}

					$DestRegion = $dest_zone_details["code"];
					$DestCountry = $dest_country_details["iso_code_2"];
				}

			} else {
				// this shipping address for post is used in else part when the tax is calculated from admin (update Total)
				//and if when the tax is calculated from customer side.
				if(!isset($this->customer->request->post['shipping_address']) || !isset($this->customer->request->post['payment_address']))
				{
					if(isset($this->session->data['shipping_address']))
					{
					  $guest_address = $this->session->data['shipping_address'];
					   $DestAddress = $guest_address['address_1'];
						$DestCity = $guest_address['city'];
						$DestPostalCode = $guest_address['postcode'];
					}
					else
					{
					if(isset($this->session->data['payment_address']))
					{
						$guest_address = $this->session->data['payment_address'];
					   $DestAddress = $guest_address['address_1'];
						$DestCity = $guest_address['city'];
						$DestPostalCode = $guest_address['postcode'];
						}
					}
					$DestRegion = $dest_zone_details["code"];
					$DestCountry = $country_details["iso_code_2"];
				}
				else
				{
					if(isset($this->customer->request->post['shipping_address_1']))
					{
						$DestAddress = $this->customer->request->post['shipping_address_1'];
						$DestCity = $this->customer->request->post['shipping_city'];
						$DestPostalCode = $this->customer->request->post['shipping_postcode'];
					}
					else
					{
					if(isset($this->session->data['payment_address']))
					{
						
						$DestAddress = $this->customer->request->post['payment_address_1'];
						$DestCity = $this->customer->request->post['payment_city'];
						$DestPostalCode = $this->customer->request->post['payment_postcode'];
					  }  
					}

					$DestRegion = $dest_zone_details["code"];

					$DestCountry = $dest_country_details["iso_code_2"];
				}
			}

			$CompanyCode = $this->config->get('config_avatax_company_code');
			$DocType = "SalesOrder";
			//$DocCode = $this->config->get('config_invoice_prefix').$this->config->get('config_account_id');
			$a = session_id();
			if(empty($a)) session_start();

			//$DocCode = session_id();
			$DocCode = "taxphp";
			$SalesPersonCode = "";
			$EntityUseCode = "";
			$Discount = 0;

			//Added for discount calculation and coupon amount is taken from store front
			if(isset($this->session->data['coupon_amount']) && !empty($this->session->data['coupon_amount']))
			{
				$Discount = $this->session->data['coupon_amount'];
			}

			//echo "\nDiscount: ".$this->session->data['coupon_amount'];
			//print_r($this->session->data);
			$PurchaseOrderNo = '';
			$ExemptionNo = "";
			$LocationCode = '';
			$LineNo = 1;
			$order_total = 0;
			$status = false;

			$client = new TaxServiceSoap($environment);
			$request = new GetTaxRequest();
			$dateTime = new DateTime();
			//$request->setDocDate($DocDate);
			$request->setCompanyCode($CompanyCode);
			$request->setDocType($DocType);
			$request->setDocCode($DocCode);
			$request->setDocDate(date_format($dateTime, "Y-m-d"));
			$request->setSalespersonCode($SalesPersonCode);
			$request->setCustomerCode($CustomerCode);
			$request->setCustomerUsageType($EntityUseCode);
			$request->setDiscount($Discount);
			$request->setPurchaseOrderNo($PurchaseOrderNo);
			$request->setExemptionNo($ExemptionNo);
			$request->setDetailLevel(DetailLevel::$Tax);
			$request->setLocationCode($LocationCode);
			$request->setCommit(FALSE);

			//Add Origin Address
			$origin = new Address();
			$origin->setLine1($OrigAddress);
			$origin->setLine2("");
			$origin->setCity($OrigCity);
			$origin->setRegion($OrigRegion);
			$origin->setPostalCode($OrigPostalCode);
			$origin->setCountry($OrigCountry);
			$request->setOriginAddress($origin);

			// Add Destination Address
			if(isset($DestAddress)) {
				$destination = new Address();
				$destination->setLine1($DestAddress);
				$destination->setLine2("");
				$destination->setCity($DestCity);
				$destination->setRegion($DestRegion);
				$destination->setPostalCode($DestPostalCode);
				$destination->setCountry($DestCountry);
				$request->setDestinationAddress($destination);
			}
			//
			// Line level processing
			$Ref1 = '';
			$Ref2 = '';
			$ExemptionNo = '';
			$RevAcct = '';
			$EntityUseCode = '';

			$lines = array();
			$product_total = 0;
			$i = 0;

			$products = $this->cart->getProducts();		//getProducts function is executed from cart.php page
			$lineCount = count($products);
			
			foreach ($products as $product)
			{
				$total_amount = $product["total"];
				$Description = $this->getCategories($product["product_id"]);

				if(isset($product["tax_class_id"]) && $product["tax_class_id"] > 0)
				{
					if($product["tax_class_title"] == 'Non Taxable')
					{
						$TaxCode = 'NT';
					}
					else
					{
						$TaxCode = $product["tax_class_title"];
					}
				}
				else
				{
					$TaxCode = '';
				}

				$line1 = new Line();
				$line1->setNo($product["product_id"]);

				//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number
				//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
				if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
				{
					$line1->setItemCode("UPC:".$product["upc"]);
				}
				elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
				{
					$line1->setItemCode(substr($product["sku"],0,50));
				}
				else
				{
					$line1->setItemCode(substr($product["model"],0,50));
				}

				$line1->setDescription($Description);
				$line1->setTaxCode($TaxCode);
				$line1->setQty($product["quantity"]);
				//$line1->setAmount($product["price"]);
				//$line1->setAmount($product["total"]);
				$line1->setAmount($total_amount);

			   //Added to handle coupon scenario regarding multiple products or order
				if(isset($this->session->data['coupon_amount']) && !empty($this->session->data['coupon_amount']))
				{
					if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
					{
						$coupon_info = $this->session->data['coupon_info'];
					}
					else
					{
						$coupon_info = array('product'=>'');
					}
					if (!$coupon_info['product'] && empty($coupon_info['product'])) {
						$status = true;
					}
					else {
						if (in_array($product['product_id'], $coupon_info['product'])) {
							$status = true;
						} else {
							$status = false;
						}
					}
				}
				else
				{
					$status = false;
				}

				$line1->setDiscounted($status);

				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);
				$line1->setOriginAddress($origin);
				$line1->setDestinationAddress($destination);

				$lines[$i] = $line1;
				$i++;
				$order_total += $total_amount;
				//if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $product["quantity"]);
				$product_total += $product['quantity'];
			}
			//Shipping Line Item
			// Order Total
			 if(isset($this->session->data['shipping_method']))
			 {
				 $shipping_method = $this->session->data['shipping_method'];
				 if(isset($shipping_method["tax_class_id"]) && $shipping_method["tax_class_id"] > 0)
				 {
					 $TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $shipping_method["tax_class_id"] . "'");
					 if($TaxClasses->row['title'] == 'Non Taxable')
					 {
						 $TaxCode = 'NT';
					 }
					 else
					 {
						 $TaxCode = $TaxClasses->row['title'];
					 }
				 }
				 else
				 {
					 //$TaxCode = 'FR';
					 $TaxCode = '';
				 }

				$line1 = new Line();
				$line1->setNo($i+1);
				$line1->setItemCode($shipping_method['code']);
				$line1->setDescription($shipping_method['title']);
				$line1->setTaxCode($TaxCode);
				$line1->setQty(1);
				
				//If Coupon is applied & free shipping is enabled, we'll pass 0 to free shipping - https://avalara.atlassian.net/wiki/display/CONNECTOR/Free+Shipping+option+in+Coupons
				$cost = $shipping_method['cost'];
				if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
				{
					$coupon_info = $this->session->data['coupon_info'];
					if($coupon_info['shipping'])
					{
						$cost = 0;
					}
				}
				$line1->setAmount($cost);

				$line1->setDiscounted(false);	//Changed to true to not consider discount amount
				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);
				$line1->setOriginAddress($origin);
				$line1->setDestinationAddress($destination);

				$lines[$i] = $line1;
				//echo "<br>Cnt1 ".$i;
				//print_r($line1);
				$i++;
			 }

			//Code added for handling fee
			$hadling_total = $this->config->get('handling_total');
			$hadling_tax_class_id = $this->config->get('handling_tax_class_id');
			$hadling_fee = $this->config->get('handling_fee');

			//Added Handling Status in if condition by Vijay Nalawade on 13 Jan 2015. To check if Handling Fee status is enabled or not
			$handling_status = $this->config->get('handling_status');

			if((!empty($hadling_total)) && ($handling_status==1))
			{
				if($order_total <= $hadling_total){
					if($hadling_tax_class_id > 0)
					{
						$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $hadling_tax_class_id . "'");
						if($TaxClasses->row['title'] == 'Non Taxable')
						{
							$TaxCode = 'NT';
						}
						else
						{
							$TaxCode = $TaxClasses->row['title'];
						}
					}
					else
					{
						//$TaxCode = 'HNLD';
						$TaxCode = '';
					}
					$line1 = new Line();
					$line1->setNo($i+1);
					$line1->setItemCode('handling');
					$line1->setDescription('Handling Fee');
					//$line1->setTaxCode($TaxCode);
					$line1->setQty(1);
					$line1->setAmount($hadling_fee);
					$line1->setDiscounted(false);
					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
				}
			}

			//$request->setLines(array($lines));
			$request->setLines($lines);
			$returnMessage = "";

			

			try {
			
			if (!empty($DestAddress)) {
            
            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['latency'] = $latency ;
				
				
				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {
				
				
				/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
			
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file


                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
				
				

					

					return $getTaxResult;

					// If NOT success - display error messages to console
					// it is important to itterate through the entire message class

				} else {
					foreach ($getTaxResult->getMessages() as $msg) {
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
					}
					return $getTaxResult;
				}
				}
			} catch (SoapFault $exception) {
				$returnMessage = "Exception: ";
				if ($exception)
					$returnMessage .= $exception->faultstring;
				return 0;

			}   //Comment this line to return SOAP XML
		}
				]]></add>
			</operation>
			<operation>
				<search position="after" offset="3" ><![CDATA['amount'      => $amount]]></search>
				<add><![CDATA[
			}
				]]></add>
			</operation>
			<operation>
				<search position="after"><![CDATA[$tax_rate_data = array();]]></search>
				<add><![CDATA[
			//Variable Mapping
			if ($this->customer->isLogged()) {
				$customer_address = $this->customer->getAddress($this->customer->getAddressId());
				$CountryCode = $customer_address["iso_code_2"];

			} else {
				
				$country_details = $this->getCountry($this->config->get('config_country_id'));
				$CountryCode = $country_details["iso_code_2"];
			
			}

			$amount = 0;
			//if($this->config->get('config_avatax_tax_calculation') && ($avatax_tax_country_pos!==false))
			if($this->config->get('config_avatax_tax_calculation'))
			{
				if($this->config->get('config_avatax_taxcall_flag')== 1)
				{
					$time_start = round(microtime(true) * 1000);
					unset($this->session->data['avatax_tax']);
					if(isset($this->session->data['avatax_tax'][number_format($value, 4, '.', '')]))
					{
						//$tax_result = (object) $this->session->data['avatax_tax'][number_format($value, 4, '.', '')];
						$tax_rate_data = $this->session->data['avatax_tax'][number_format($value, 4, '.', '')];
						$this->config->set('avataxname', $tax_rate_data);
					}
					else
					{
						//$amount = $this->AvaTaxAmount($value);


						
						$tax_result = $this->AvaTaxAmount($value);
					
						
			
						$tax_rate_data = array();
						$tax_rate_count = 0;

						if ($tax_result->getResultCode() == SeverityLevel::$Success)
						{
							foreach($tax_result->getTaxLines() as $tax_line)
							{
								foreach($tax_line->getTaxDetails() as $tax_details)
								{
									$tax_rate_data[$tax_rate_count] = array(
										'tax_rate_id' => $tax_rate_count,
										'name'        => $tax_details->getTaxName(),
										'rate'        => $tax_details->getRate(),
										'type'        => $tax_details->getTaxType(),
										'amount'      => $tax_details->getTax()
									);
									$tax_rate_count++;
								}
								$this->config->set('avataxname', $tax_rate_data);
							}
							$this->session->data['avatax_tax'][number_format($value, 4, '.', '')] = $tax_rate_data;
							$this->session->data['previous_error_status'] = "Success";
						}
						else
						{
							$errormsg = "";
							/*foreach ($tax_result->getMessages() as $msg) {
								//$this->session->data['previous_error_status'].= $msg->getName() . ": " . $msg->getSummary() . "\n";
								$errormsg .= $msg->getName() . ": " . $msg->getSummary() . "\n";

							}*/
							$msg = $tax_result->getMessages();
							$errormsg .= $msg[0]->getName() . ": " . $msg[0]->getSummary();
							$this->session->data['previous_error_status'] = '<div class="warning" style="padding: 10px 10px 10px 33px;margin-bottom: 15px;color: #555555;background: #FFD1D1 url("../image/warning.png") 10px center no-repeat;border: 1px solid #F8ACAC;		-webkit-border-radius: 5px 5px 5px 5px;-moz-border-radius: 5px 5px 5px 5px;-khtml-border-radius: 5px 5px 5px 5px;border-radius: 5px 5px 5px 5px;">
							<b>Avatax - Address Validation Error Message: </b>' . $errormsg .'<img src="catalog/view/theme/default/image/close.png" alt="" class="close" /></div>';
							$this->session->data['ava_taxrate']= 'T';
						}
						$this->config->set('config_avatax_taxcall_flag','0');
						
						/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						if($log_mode==1){
						   
							require_once(VQMod::modCheck(VQMod::modCheck(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php')));			
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object

							// Creating the System Logger Object
							$application_log 	= 	new SystemLogger;
							$connectortime = round(microtime(true) * 1000)-$time_start;
							$latency = $this->session->data['latency']  ;
							$connectortime= $connectortime- $latency;
							
							$application_log->metric('GetTax '.$tax_result->getDocType(),count($tax_result->getTaxLines()),$tax_result->getDocCode(),$connectortime,$latency);
							
							$latency =""  ;
							$this->session->data['latency'] ="";
							//$application_log->metric('GetTax123','','',$connectortime,'');

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
						
						}
					}
				}
			}
			else
			{
				$this->session->data['previous_error_status'] = "Success";
				]]></add>
			</operation>
		</file>
		<file name="catalog/controller/checkout/confirm.php">
			<operation>
				<search position="before" ><![CDATA[public function index() {]]></search>
				<add><![CDATA[public $tax_address_error;]]></add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[$this->session->data['order_id'] = $this->model_checkout_order->addOrder($order_data);]]></search>
				<add><![CDATA[

				//AvaTax - Address Validation - Check
				$this->load->model('localisation/country');
				if(!empty($order_data["shipping_country_id"]))
				{
					$country_details = $this->model_localisation_country->getCountry($order_data["shipping_country_id"]);
				}
				else
				{
					$country_details = $this->model_localisation_country->getCountry($order_data["payment_country_id"]);
				}
				$avatax_tax_country = "";
				if(trim($this->config->get('config_avatax_validate_address_in'))=="both")
				{
					$avatax_tax_country = "|US|CA|";
				}
				else
				{
					$avatax_tax_country = "|".$this->config->get('config_avatax_validate_address_in')."|";
				}
				$avatax_tax_country_pos = strpos($avatax_tax_country, "|".$country_details["iso_code_2"]."|");
				if($avatax_tax_country_pos!==false)
				{
					if(isset($this->session->data['previous_error_status']))
					{
						if($this->session->data['previous_error_status'] != 'Success')
						{
							$data['ERROR_STATUS'] = $this->session->data['previous_error_status'];
						}
					}

				}
				//$data['ERROR_STATUS'] = $this->tax_address_error;]]></add>
			</operation>
			<operation>
				<search position="after" ><![CDATA[			$total = 0;]]></search>
				<add><![CDATA[$this->config->set('config_avatax_taxcall_flag','1');]]></add>
			</operation>
			
			<operation>
				<search position="after" offset='2' ><![CDATA[$this->response->setOutput($this->load->view('default/template/checkout/confirm.tpl', $data));]]></search>
				<add><![CDATA[public function AvaTaxAddressValidation($data) {

					$environment = 'Development';
					if($this->config->get('config_avatax_development_mode')) $environment = 'Development';
					else $environment = 'Production';

					$this->load->model('localisation/zone');
								$zone_info = $this->model_localisation_zone->getZone($data['shipping_zone_id']);

						$address_data = array();
					$address_data["service_url"] = $this->config->get('config_avatax_service_url');
					$address_data["account"] = $this->config->get('config_avatax_account');
					$address_data["license"] = $this->config->get('config_avatax_license_key');
					$address_data["client"] = $this->config->get('config_avatax_client');
					$address_data["environment"] = $environment;
					$address_data["line1"] = $data["shipping_address_1"];
					$address_data["line2"] = $data["shipping_address_2"];
					$address_data["line3"] = "";
					$address_data["city"] = $data["shipping_city"];
					$address_data["region"] = $zone_info["code"];
					$address_data["postalcode"] = $data["shipping_postcode"];

					include_once(DIR_SYSTEM . 'AvaTax4PHP/address_validation.php');
					$return_message = AddressValidation($address_data);

					$avatax_address_validation = "";
					if(trim($return_message) != "Success")
					{
						$avatax_address_validation = '<div class="warning">'.$return_message.'<img src="catalog/view/theme/default/image/close.png" alt="" class="close" /></div>';
					}
					return $avatax_address_validation;
				}]]></add>
			</operation>
		</file>
		
		 <file name="catalog/model/payment/pp_express.php">
			<operation>
				<search position="before" ><![CDATA[$taxes = $this->cart->getTaxes();]]></search>
				<add><![CDATA[$this->config->set('config_avatax_taxcall_flag','1');]]></add>
			</operation>
		</file>
		
		<file name="catalog/view/theme/default/template/checkout/confirm.tpl">
			<operation>
				<search position="before" ><![CDATA[<?php if (!isset($redirect)) { ?>]]></search>
				<add><![CDATA[<?php if(isset($ERROR_STATUS)) echo $ERROR_STATUS; ?>]]></add>
			</operation>
		</file>
		<file name="catalog/model/checkout/order.php">
			<operation>
				<search position="before" ><![CDATA[$this->cache->delete('product');]]></search>
				<add><![CDATA[
				$avatax_tax_country = "";
				if(trim($this->config->get('config_avatax_validate_address_in'))=="both")
				{
					$avatax_tax_country = "|US|CA|";
				}
				else
				{
					$avatax_tax_country = "|".$this->config->get('config_avatax_validate_address_in')."|";
				}
					$avatax_tax_country_pos = strpos($avatax_tax_country, "|".$order_info["shipping_iso_code_2"]."|");

				//if($this->config->get('config_avatax_tax_calculation') && ($avatax_tax_country_pos !== false))
				if($this->config->get('config_avatax_tax_calculation'))
				{
					$time_start = round(microtime(true) * 1000);
					//Call 2 Methods
					//1. GetTax with OrderType = SalesInvoice
					$products = $this->cart->getProducts();
					
					//added for paypal checkout
					if($order_status_id!=0)
					{
						$order_info["order_status_id"]=$order_status_id;
					}

					$checkEmpty = array_filter($products);
					if (!empty($checkEmpty)) 
					{
						require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');	

						

						$GetTaxReturnValue = $this->AvaTaxGetTaxOrder($order_info, $products);


						//3. Get the Document Id from PostTax Return Value and update it in the Order Table
						//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
						//$query_avatax = mysql_query("SELECT avatax_paytax_document_id FROM `" . DB_PREFIX . "order`");

						$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "order` LIKE 'avatax_paytax_document_id'");
						if($result->num_rows == 0){
							$this->db->query("ALTER TABLE `" . DB_PREFIX . "order` ADD `avatax_paytax_document_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_transaction_id` INT NOT NULL DEFAULT '0', ADD `avatax_paytax_document_code` VARCHAR( 40 ) NOT NULL, ADD `avatax_paytax_error_message` TEXT NOT NULL");
						}

						//2. PostTax with GUID
						//5. Completed, 15. Processed, 3. Shipped


							if(is_array($GetTaxReturnValue))
							{
								$this->updateOrderForAvaTaxFields(0, 0, $GetTaxReturnValue["GetTaxDocCode"], "Success", $order_id);
							
						/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime= $connectortime- $latency;
						
						$application_log->metric('GetTax123 '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			
					
		
			
							}
							else
							{
								if(strpos($GetTaxReturnValue,"urisdictionNotFoundError:"))
								{
									$this->updateOrderForAvaTaxFields(0, 0, 0, $GetTaxReturnValue, $order_id);
								}

							}
						//}
					}
				}
				]]></add>
			</operation>
		</file>
		<file name="catalog/model/catalog/product.php">
			<operation>
				<search position="before" ><![CDATA[public function getProductDiscounts($product_id) {]]></search>
				<add><![CDATA[
		public function getProductDiscountsForGivenRange($product_id, $quantity, $date) {
			if ($this->customer->isLogged()) {
				$customer_group_id = $this->customer->getGroupId();
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');
			}

			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_discount WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND quantity <= '" . (int)$quantity . "' AND ((date_start = '0000-00-00' OR date_start < '" . $date . "') AND (date_end = '0000-00-00' OR date_end > '" . $date . "')) ORDER BY quantity ASC, priority ASC, price ASC");

			return $query->rows;
		}
				]]></add>
			</operation>
		</file>
		<file name="admin/model/catalog/product.php">
			<operation>
				<search position="before" ><![CDATA[public function getProductDiscounts($product_id) {]]></search>
				<add><![CDATA[
		public function getProductDiscountsForGivenRange($product_id, $quantity, $date, $customer_group_id) {

			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_discount WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND quantity <= '" . (int)$quantity . "' AND ((date_start = '0000-00-00' OR date_start < '" . $date . "') AND (date_end = '0000-00-00' OR date_end > '" . $date . "')) ORDER BY quantity ASC, priority ASC, price ASC");

			return $query->rows;
		}
				]]></add>
			</operation>
		</file>
		<file name="catalog/model/checkout/order.php">
			<operation><!--modified from update to addorderhistory-->
				<search position="before" ><![CDATA[public function addOrderHistory($order_id, $order_status_id, $comment = '', $notify = false) {]]></search>
				<add><![CDATA[

				public function updateOrderForAvaTaxFields($avatax_document_id, $avatax_transaction_id, $avatax_document_code, $avatax_error_message, $order_id) {
					$this->db->query("UPDATE `" . DB_PREFIX . "order` SET avatax_paytax_document_id = '" . (int)$avatax_document_id . "', avatax_paytax_transaction_id = '" . (int)$avatax_transaction_id . "', avatax_paytax_document_code = '" . (int)$avatax_document_code . "', avatax_paytax_error_message = '".$this->db->escape($avatax_error_message)."' WHERE order_id = '" . (int)$order_id . "'");
				}

		public function getCountry($country_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "country WHERE country_id = '" . (int)$country_id . "'");

			return $query->row;
		}

		public function getZone($zone_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "zone WHERE zone_id = '" . (int)$zone_id . "'");

			return $query->row;
		}

		public function getCategories($product_id) {
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category pc LEFT JOIN " . DB_PREFIX . "category_description cd ON (pc.category_id = cd.category_id) WHERE pc.product_id = '" . (int)$product_id . "'");

			$product_categories = "";
			foreach($query->rows as $row)
			{
				$product_categories .= $row["name"].", ";
			}
			//$product_categories = substr($product_categories, 0, (strlen($product_categories) - 2));
			//$product_categories = substr($product_categories, 0, 24);
			return $product_categories;
		}

		 //Removed older getProductOriginalPrice function. Replaced with admin function
			public function getProductOriginalPrice($product_id) {
			$product_price_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$product_id . "'");
			if($product_price_query->row["tax_class_id"] > 0)
			{
				$Taxcodetitle = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class WHERE tax_class_id = '" . (int)$product_price_query->row["tax_class_id"] . "'");
				$taxcode = $Taxcodetitle->row['title'];
			}
			else
			{
				$taxcode = '';
			}
			if ($product_price_query->num_rows) {
				//$price = $product_price_query->row['price'];
				$Product_price_taxcode = array(
									'product_price'                => $product_price_query->row['price'],
									'tax_class_title'              => $taxcode,
							   );
			}

			return $Product_price_taxcode;
		}

		public function AvaTaxGetTaxOrder($order_info, $products) {
			
			include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

			global $registry;
			$this->cart = $registry->get('cart');

			$environment = 'Development';

			$service_url = $this->config->get('config_avatax_service_url');
			$account = $this->config->get('config_avatax_account');
			$license = $this->config->get('config_avatax_license_key');
			$client = $this->config->get('config_avatax_client');

			if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
				$environment = "Development";
			else 
				$environment = "Production";

			new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

			//Variable Mapping
			if ($this->customer->isLogged()) {
				$customer_address = $this->customer->getAddress($this->customer->getAddressId());
				$CustomerCode = $customer_address["customer_id"];
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');

				//$CustomerCode = $this->config->get('config_account_id');
				$CustomerCode = $this->config->get('config_customer_group_id');
			}

			$country_details = $this->getCountry($this->config->get('config_country_id'));
			$zone_details = $this->getZone($this->config->get('config_zone_id'));

			$OrigAddress = $this->config->get('config_address');
			$OrigCity = $this->config->get('config_city');
			$OrigRegion = $zone_details["code"];
			$OrigPostalCode = $this->config->get('config_postal_code');
			$OrigCountry = $country_details["iso_code_2"];

			if(!empty($order_info["shipping_address_1"]))
			{
		
				$DestAddress = $order_info["shipping_address_1"];
				$DestCity = $order_info["shipping_city"];
				$DestRegion = $order_info["shipping_zone_code"];
				$DestPostalCode = $order_info["shipping_postcode"];
				$DestCountry = $order_info["shipping_iso_code_2"];
			}
			else
			{
		
				$DestAddress = $order_info["payment_address_1"];
				$DestCity = $order_info["payment_city"];
				$DestRegion = $order_info["payment_zone_code"];
				$DestPostalCode = $order_info["payment_postcode"];
				$DestCountry = $order_info["payment_iso_code_2"];
			}

			$CompanyCode = $this->config->get('config_avatax_company_code');
			$DocType = $this->config->get('config_avatax_transaction_calculation');
			if($DocType == 1){
				$DocType = "SalesInvoice";
			}else{
				$DocType = "SalesOrder";
			}
			$DocCode = $order_info['order_id'];
			$SalesPersonCode = "";
			$EntityUseCode = "";
			$Discount = 0;
			$PurchaseOrderNo = '';
			$ExemptionNo = "";
			$LocationCode = '';
			$LineNo = 1;

			$client = new TaxServiceSoap($environment);
			$request = new GetTaxRequest();
			$dateTime = new DateTime();
			//$request->setDocDate($DocDate);
			$request->setCompanyCode($CompanyCode);
			$request->setDocType($DocType);
			$request->setDocCode($DocCode);
			$request->setDocDate(date_format($dateTime, "Y-m-d"));
			$request->setSalespersonCode($SalesPersonCode);
			$request->setCustomerCode($CustomerCode);
			$request->setCustomerUsageType($EntityUseCode);
			$request->setPurchaseOrderNo($PurchaseOrderNo);
			$request->setExemptionNo($ExemptionNo);
			$request->setDetailLevel(DetailLevel::$Tax);
			$request->setLocationCode($LocationCode);
			//$request->setCommit(FALSE);

			//Code for paypal status
			if(isset($order_info["order_status_id"]) && $order_info["order_status_id"]==5 )
				$request->setCommit(TRUE);
			else 
				$request->setCommit(FALSE);

			//Add Origin Address
			$origin = new Address();
			$origin->setAddressCode(0);
			$origin->setLine1($OrigAddress);
			$origin->setLine2("");
			$origin->setCity($OrigCity);
			$origin->setRegion($OrigRegion);
			$origin->setPostalCode($OrigPostalCode);
			$origin->setCountry($OrigCountry);
			$request->setOriginAddress($origin);

			// Add Destination Address
			$destination = new Address();
			$destination->setAddressCode(1);
			$destination->setLine1($DestAddress);
			$destination->setLine2("");
			$destination->setCity($DestCity);
			$destination->setRegion($DestRegion);
			$destination->setPostalCode($DestPostalCode);
			$destination->setCountry($DestCountry);
			$request->setDestinationAddress($destination);

			//
			// Line level processing
			$Ref1 = '';
			$Ref2 = '';
			$ExemptionNo = '';
			$RevAcct = '';
			$EntityUseCode = '';

			$lines = array();
			$product_total = 0;
			$i = 0;
			$ordertotal = 0 ;
			$status = false;

			$avatax_discount_amount = 0;
			$TaxCode = 0;

			$lineCount = count($products);
			foreach ($products as $product) {

				/*$product_original_amount = $this->getProductOriginalPrice($product["product_id"]);
				$total_amount = ($product_original_amount * $product["quantity"]);*/
				$total_amount = $product["total"];

				$Description = $this->getCategories($product["product_id"]);
				//$TaxCode = substr($product["name"], 0, 24);
				if(isset($product["tax_class_id"]) && $product["tax_class_id"] > 0)
				{
					if($product["tax_class_title"] == 'Non Taxable')
					{
						$TaxCode = 'NT';	//Used to post product on amdin console.
					}
					else
					{
						$TaxCode = $product["tax_class_title"];
					}
				}
				else
				{
					$TaxCode = '';
				}

				//Product Discount
				$this->load->model('catalog/product');
				//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
				$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"], date_format($dateTime, "Y-m-d"));

				$discount_count = 0;
				$discount_amount = 0;
				foreach($product_discount as $discount) {
					$discount_amount += $discount["price"];
					$discount_count++;
				}

				$line1 = new Line();
				//$line1->setNo($i+1);//$product["product_id"]
				$line1->setNo($product["product_id"]);

				//UPC Code Added by Vijay as on 3rd Dec 2014. If enabled, UPC code will be passed instead of Model number
				//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
				if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
				{
					$line1->setItemCode("UPC:".$product["upc"]);
				}
				elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
				{
					$line1->setItemCode(substr($product["sku"],0,50));
				}
				else
				{
					$line1->setItemCode(substr($product["model"],0,50));
				}

				$line1->setDescription($Description);
				$line1->setTaxCode($TaxCode);
				$line1->setQty($product["quantity"]);
				//$line1->setAmount($product["price"]);
				//$line1->setAmount($product["total"]);
				$line1->setAmount($total_amount);
				//if($discount_count>0) $line1->setDiscounted(true);
				//else $line1->setDiscounted(false);

				//Added by Tushar coupon_info
				//Added to handle coupon scenario regarding multiple products or order
				if(isset($this->session->data['coupon_amount']) && !empty($this->session->data['coupon_amount']))
				{
					if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
					{
						$coupon_info = $this->session->data['coupon_info'];
					}
					else
					{
						$coupon_info = array('product'=>'');
					}
					if (!$coupon_info['product'] && empty($coupon_info['product'])) {
						$status = true;
					}
					else {
						if (in_array($product['product_id'], $coupon_info['product'])) {
							$status = true;
						} else {
							$status = false;
						}
					}
				}
				else
				{
					$status = false;
				}
				$line1->setDiscounted($status);
			
				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);
				$line1->setOriginAddress($origin);
				$line1->setDestinationAddress($destination);

				$lines[$i] = $line1;
				$i++;
				$ordertotal += $total_amount;
				if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $product["quantity"]);
				$product_total += $product['quantity'];
			}

			//Shipping Line Item
			// Order Totals
			$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_info['order_id'] . "' ORDER BY sort_order ASC");

			$shipping_count = 0;

			foreach ($order_total_query->rows as $order_total) {
				if($order_total['code']=="coupon") {
					$Discount = abs($order_total['value']);
				}
			}
		
			foreach ($order_total_query->rows as $order_total) {
				if($order_total['code']=="shipping") {
					if(isset($this->session->data['shipping_method']))
					{
					$shipping_method = $this->session->data['shipping_method'];
					if(isset($shipping_method["tax_class_id"]))
					{
						if($shipping_method["tax_class_id"] > 0){
							$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $shipping_method["tax_class_id"] . "'");
							if($TaxClasses->row['title'] == 'Non Taxable')
							{
								$TaxCode = 'NT';
							}
							else
							{
								$TaxCode = $TaxClasses->row['title'];
							}
						}
						else{
						   // $TaxCode = 'FR';
						   $TaxCode = '';
						}
					}
					}
					//$TaxCode = $product["tax_class_id"];
					$line1 = new Line();
					$line1->setNo($i+1);
					$line1->setItemCode($order_total['code']);
					$line1->setDescription($order_total['title']);
					$line1->setTaxCode($TaxCode);
					$line1->setQty(1);

					//If Coupon is applied & free shipping is enabled, we'll pass 0 to free shipping - 
					$cost = $order_total['value'];
					if(isset($this->session->data['coupon_info']) && !empty($this->session->data['coupon_info']))
					{
						$coupon_info = $this->session->data['coupon_info'];
						if($coupon_info['shipping'])
						{
							$Discount = $Discount - $cost;
							$cost = 0;
						}
					}
					$line1->setAmount($cost);
					
					$status = false;
					$line1->setDiscounted($status);
				
					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
					$shipping_count++;
				}
				if($order_total['code']=="handling") {
					$hadling_total = $this->config->get('handling_total');
					$hadling_tax_class_id = $this->config->get('handling_tax_class_id');
					$hadling_fee = $this->config->get('handling_fee');
					//echo "<br>Hadling 2: ".$hadling_fee;

					//Added Handling Status in if condition by Vijay Nalawade on 13 Jan 2015. To check if Handling Fee status is enabled or not
					$handling_status = $this->config->get('handling_status');

					if($handling_status==1)
					{
						if($ordertotal <= $hadling_total)
						{
							if($hadling_tax_class_id > 0){
								$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $hadling_tax_class_id . "'");
								if($TaxClasses->row['title'] == 'Non Taxable')
								{
									$TaxCode = 'NT';
								}
								else
								{
									$TaxCode = $TaxClasses->row['title'];
								}
							}
							else{
								//$TaxCode = 'HNLD';
								$TaxCode = '';
							}
						}
					}
					//$TaxCode = $product["tax_class_id"];
					$line1 = new Line();
					$line1->setNo($i+1);
					$line1->setItemCode($order_total['code']);
					$line1->setDescription($order_total['title']);
					//$line1->setTaxCode($TaxCode);
					$line1->setQty(1);
					$line1->setAmount($order_total['value']);
					
					$status = false;
					$line1->setDiscounted($status);
				
					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
				}
			}

			/*if($shipping_count==0)
			{
				//$TaxCode = $product["tax_class_id"];
				$line1 = new Line();
				$line1->setNo($i+1);
				$line1->setItemCode("shipping");
				$line1->setDescription("shipping");
				$line1->setTaxCode($TaxCode);
				$line1->setQty(1);
				$line1->setAmount(0);
				$line1->setDiscounted(false);
				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);
				$line1->setOriginAddress($origin);
				$line1->setDestinationAddress($destination);

				$lines[$i] = $line1;
			}*/

			//$request->setLines(array($lines));
			$request->setLines($lines);
			//print_r($request);
			//$request->setDiscount($avatax_discount_amount);
			//$request->setDiscount('0');
			$request->setDiscount($Discount);

			$GetTaxData = array();
			$returnMessage = "";

			

			try {
			
			if (!empty($DestAddress)) {
			
            //$connectortime = round(microtime(true) * 1000)-$time_start;
            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['getTaxLines'] = "" ;
			$this->session->data['getDocType'] = "" ;
			$this->session->data['getDocCode'] = "" ;
			$this->session->data['latency'] = $latency ;
			$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
			$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
			$this->session->data['getDocCode'] = $getTaxResult->getDocCode();
			
				
				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {

					$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
					$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
					$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
					$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();

					

					//Added for connector metrics
					/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
				
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    

                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
				
					
					return $GetTaxData;

				} else {

					foreach ($getTaxResult->getMessages() as $msg) {
						//echo $msg->getName() . ": " . $msg->getSummary() . "\n";
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
					}
					return $returnMessage;
				}
				}
			} catch (SoapFault $exception) {
				$msg = "Exception: ";
				if ($exception)
					$msg .= $exception->faultstring;

					// If you desire to retrieve SOAP IN / OUT XML
					//  - Follow directions below
					//  - if not, leave as is

					//echo $msg . "\n";
					return $msg;
					//    }   //UN-comment this line to return SOAP XML
			}   //Comment this line to return SOAP XML
			/**/
		}

				public function AvaTaxPostTax($GetTaxReturnValue) {

					$environment = 'Development';
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else 
						$environment = "Production";

					$order_data = array();
					$dateTime = new DateTime();
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "SalesInvoice";

					$order_data["DocCode"] = $GetTaxReturnValue['GetTaxDocCode'];
					$order_data["DocDate"] = $GetTaxReturnValue['GetTaxDocDate'];


					$order_data["TotalAmount"] = $GetTaxReturnValue['GetTaxTotalAmount'];
					$order_data["TotalTax"] = $GetTaxReturnValue['GetTaxTotalTax'];
					$order_data["Commit"] = 1;

					include_once(DIR_SYSTEM . 'AvaTax4PHP/post_tax.php');
					$return_message = PostTax($order_data);
					return $return_message;
				}

				]]></add>
			</operation>
		</file>
		<file name="catalog/model/account/return.php">
			<operation>
				<search position="before" ><![CDATA[public function getReturn($return_id) {]]></search>
				<add><![CDATA[
				public function getProductOriginalPrice($product_id) {
					$product_price_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$product_id . "'");
					$Taxcodetitle = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class WHERE tax_class_id = '" . (int)$product_price_query->row["tax_class_id"] . "'");
					if ($product_price_query->num_rows) {
						//$price = $product_price_query->row['price'];
						 $Product_price_taxcode = array(
							 'product_price'                => $product_price_query->row['price'],
							 'tax_class_title'              => $Taxcodetitle->row['title'],
					 );
				 }
				 return $Product_price_taxcode;
			  }

				public function AvaTaxGetTaxHistory($OrderInformation) {

					$environment = 'Development';
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else 
						$environment = "Production";

					$order_data = array();
					$dateTime = new DateTime();
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "SalesInvoice";
					$order_data["DocCode"] = $OrderInformation->row['avatax_paytax_document_code'];

					include_once(DIR_SYSTEM . 'AvaTax4PHP/get_tax_history.php');
					$return_message = GetTaxHistory($order_data);

					return $return_message;
				}

				public function getCountry($country_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM `" . DB_PREFIX . "country` WHERE country_id = '" . (int)$country_id . "'");

					return $query->row;
				}

				public function getZone($zone_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM `" . DB_PREFIX . "zone` WHERE zone_id = '" . (int)$zone_id . "'");

					return $query->row;
				}

				public function getCategories($product_id) {
					$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category pc LEFT JOIN " . DB_PREFIX . "category_description cd ON (pc.category_id = cd.category_id) WHERE pc.product_id = '" . (int)$product_id . "'");

					$product_categories = "";
					foreach($query->rows as $row)
					{
						$product_categories .= $row["name"].", ";
					}
					return $product_categories;
				}

				public function getReturnOrderDocCode($order_id) {

					//$query = $this->db->query("SELECT count(*) as total FROM `" . DB_PREFIX . "return` WHERE order_id = '" . (int)$order_id . "'");
					$return_order = $this->db->query("SELECT * FROM `" . DB_PREFIX . "return` WHERE order_id = '" .(int)$order_id . "'");
					$return_id = $return_order->rows[$return_order->num_rows-1];
					//$order_returns_count = $query->row['total'];

					return $return_id['return_id'];
				}

				public function editReturnWithAvaTaxDocCode($avatax_return_document_code, $return_id) {

					//Add one new field to Open Cart "return" table
					//Commented below line as on 3rd Dec 2014 as mysql_query will not be executed in below line.
					//$query = mysql_query("SELECT avatax_return_document_code FROM `" . DB_PREFIX . "return`");

					$result = $this->db->query("SHOW COLUMNS FROM `" . DB_PREFIX . "return` LIKE 'avatax_return_document_code'");
				   
					if($result->num_rows == 0){
						$this->db->query("ALTER TABLE `" . DB_PREFIX . "return` ADD `avatax_return_document_code` VARCHAR( 10 ) NOT NULL");
					}
					
					//echo "<br>editReturnWithAvaTaxDocCode - Doc Code ".$avatax_return_document_code." Return ID: ".$return_id;
					//exit;
					$this->db->query("UPDATE `" . DB_PREFIX . "return` SET avatax_return_document_code = '" . $avatax_return_document_code . "' WHERE return_id = '" . (int)$return_id . "'");
				}

				public function AvaTaxReturnInvoice($order_query, $products, $data, $tax_history_data) {

					if ($order_query->num_rows) {

						include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

						global $registry;
						$this->cart = $registry->get('cart');

						$environment = 'Development';

						$service_url = $this->config->get('config_avatax_service_url');
						$account = $this->config->get('config_avatax_account');
						$license = $this->config->get('config_avatax_license_key');
						$client = $this->config->get('config_avatax_client');

						if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
							$environment = "Development";
						else 
							$environment = "Production";

						new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

						if($order_query->row["customer_id"]>0) {
							$CustomerCode = $order_query->row["customer_id"];
						}
						else {
							$CustomerCode = $order_query->row["customer_group_id"];
						}

						$origin_country_details = $this->getCountry($this->config->get('config_country_id'));
						$origin_zone_details = $this->getZone($this->config->get('config_zone_id'));

						$OrigAddress = $this->config->get('config_address');
						$OrigCity = $this->config->get('config_city');
						$OrigRegion = $origin_zone_details["code"];
						$OrigPostalCode = $this->config->get('config_postal_code');
						$OrigCountry = $origin_country_details["iso_code_2"];
						
							if(!empty($order_query->row["shipping_country_id"]))
						{
							$dest_country_details = $this->getCountry($order_query->row["shipping_country_id"]);
							$dest_zone_details = $this->getZone($order_query->row["shipping_zone_id"]);

							$DestAddress = $order_query->row["shipping_address_1"];
							$DestCity = $order_query->row["shipping_city"];
							$DestRegion = $dest_zone_details["code"];
							$DestPostalCode = $order_query->row["shipping_postcode"];
							$DestCountry = $dest_country_details["iso_code_2"];
						}
						else
						{
							$dest_country_details = $this->getCountry($order_query->row["payment_country_id"]);
							$dest_zone_details = $this->getZone($order_query->row["payment_zone_id"]);

							$DestAddress = $order_query->row["payment_address_1"];
							$DestCity = $order_query->row["payment_city"];
							$DestRegion = $dest_zone_details["code"];
							$DestPostalCode = $order_query->row["payment_postcode"];
							$DestCountry = $dest_country_details["iso_code_2"];
						}


						$CompanyCode = $this->config->get('config_avatax_company_code');
						$DocType = $this->config->get('config_avatax_transaction_calculation');
						if($DocType == 1){
							$DocType = "ReturnInvoice";
						}else{
							$DocType = "ReturnOrder";
						}
						//$DocCode = $order_query->row['avatax_paytax_document_code'];
						$DocCode = $data["avatax_return_document_code"];
						
						//echo "<br>Doc Code: ".$DocCode;
						//exit;
						//$DocCode = "returnphp";
						$SalesPersonCode = "";
						$EntityUseCode = "";
						$Discount = 0;
						$PurchaseOrderNo = '';
						$ExemptionNo = "";
						$LocationCode = '';
						$LineNo = 1;

						$client = new TaxServiceSoap($environment);
						$request = new GetTaxRequest();
						$dateTime = new DateTime();
						$request->setCompanyCode($CompanyCode);
						$request->setDocType($DocType);
						$request->setDocCode($DocCode);
						$request->setDocDate(date_format($dateTime, "Y-m-d"));
						$request->setSalespersonCode($SalesPersonCode);
						$request->setCustomerCode($CustomerCode);
						$request->setCustomerUsageType($EntityUseCode);
						$request->setDiscount($Discount);
						$request->setPurchaseOrderNo($PurchaseOrderNo);
						$request->setExemptionNo($ExemptionNo);
						$request->setDetailLevel(DetailLevel::$Tax);
						$request->setLocationCode($LocationCode);

						//Return Status = Complete then Committed else Uncommitted
						if($this->config->get('config_return_status_id')==3) $request->setCommit(TRUE);
						else $request->setCommit(FALSE);

						//Add Origin Address
						$origin = new Address();
						$origin->setAddressCode(0);
						$origin->setLine1($OrigAddress);
						$origin->setLine2("");
						$origin->setCity($OrigCity);
						$origin->setRegion($OrigRegion);
						$origin->setPostalCode($OrigPostalCode);
						$origin->setCountry($OrigCountry);
						$request->setOriginAddress($origin);

						// Add Destination Address
						$destination = new Address();
						$destination->setAddressCode(1);
						$destination->setLine1($DestAddress);
						$destination->setLine2("");
						$destination->setCity($DestCity);
						$destination->setRegion($DestRegion);
						$destination->setPostalCode($DestPostalCode);
						$destination->setCountry($DestCountry);
						$request->setDestinationAddress($destination);

						// Line level processing
						$Ref1 = '';
						$Ref2 = '';
						$ExemptionNo = '';
						$RevAcct = '';
						$EntityUseCode = '';

						$lines = array();
						$product_total = 0;
						$i = 0;
						$discount_amount = 0;

						$avatax_discount_amount = 0;
						$TaxCode = 0;
		
						//print_r($products);
						//exit;
						foreach($products as $product) {

							if(trim($data['product']) == trim($product["name"]))
							{
								 $Product_detail = $this->getProductOriginalPrice($product["product_id"]);
								/*$product_original_amount = $Product_detail['product_price'];
								$total_amount = ($product_original_amount * $data["quantity"]);*/

								$total_amount = $product["price"]*$data["quantity"];
								$Description = $this->getCategories($product["product_id"]);
								//$TaxCode = substr($product["name"], 0, 24);
								if(isset($Product_detail['tax_class_title']) || $Product_detail['tax_class_title']!= null)
								{
									if($Product_detail["tax_class_title"] == 'Non Taxable')
									{
										$TaxCode = 'NT';
									}
									else
									{
										$TaxCode = $Product_detail["tax_class_title"];
									}
								}
								else
								{
									$TaxCode = '';
								}

								//Product Discount
								$this->load->model('catalog/product');
								//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
								$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"],$order_query->row["date_added"]);

								$discount_count = 0;
								$discount_amount = 0;
								foreach($product_discount as $discount) {
									$discount_amount += $discount["price"];
									$discount_count++;
								}

								$line1 = new Line();
								$line1->setNo(1);

								//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number
								//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
								//Changed by Vijay as on 31 Dec 2014 as there is a problem while checking Product code
								if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
								{
									$line1->setItemCode("UPC:".$product["upc"]);
								}
								elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
								{
									$line1->setItemCode(substr($product["sku"],0,50));
								}
								else
								{
									$line1->setItemCode(substr($product["model"],0,50));
								}

								$line1->setDescription($Description);
								$line1->setTaxCode($TaxCode);
								//$line1->setQty($product["quantity"]);
								$line1->setQty($data["quantity"]);
								//$line1->setAmount(-$product["total"]);
								$line1->setAmount(-$total_amount);
								/*if($discount_count>0) $line1->setDiscounted(true);
								else $line1->setDiscounted(false);*/
								$line1->setDiscounted(true);
								$line1->setRevAcct($RevAcct);
								$line1->setRef1($Ref1);
								$line1->setRef2($Ref2);
								$line1->setExemptionNo($ExemptionNo);
								$line1->setCustomerUsageType($EntityUseCode);
								$line1->setOriginAddress($origin);
								$line1->setDestinationAddress($destination);

								$lines[$i] = $line1;
								$i++;
								//if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $product["quantity"]);

								if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $data["quantity"]);

								$product_total += $product['quantity'];
							}
						}

						//$request->setLines(array($lines));
						$request->setLines($lines);
						//print_r($request);
						//exit;
						//$request->setDiscount(-$avatax_discount_amount);
						$request->setDiscount('0');

						$this->load->model('localisation/return_reason');
						$return_reason = $this->model_localisation_return_reason->getReturnReason($data["return_reason_id"]);

						$TaxOverride = new TaxOverride();
						//$TaxOverride->setTaxOverrideType($tax_history_data["TaxDate"]);
						$TaxOverride->setTaxOverrideType("TaxDate");
						$TaxOverride->setTaxDate($tax_history_data["DocDate"]);
						$TaxOverride->setReason($return_reason["name"]);
						$request->setTaxOverride($TaxOverride);

						$GetTaxData = array();
						$returnMessage = "";

						try {
			
			if (!empty($DestAddress)) {
			
            $connectortime = round(microtime(true) * 1000)-$time_start;
            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['getTaxLines'] = "" ;
			$this->session->data['getDocType'] = "" ;
			$this->session->data['getDocCode'] = "" ;
			$this->session->data['latency'] = $latency ;
			$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
			$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
			$this->session->data['getDocCode'] = $getTaxResult->getDocCode();
			
				
				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {

					$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
					$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
					$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
					$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();

					

					//Added for connector metrics
					/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
				
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    

                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
				
					
					return $GetTaxData;

				} else {

					foreach ($getTaxResult->getMessages() as $msg) {
						//echo $msg->getName() . ": " . $msg->getSummary() . "\n";
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
					}
					return $returnMessage;
				}
				} 
				}catch (SoapFault $exception) {
							$msg = "Exception: ";
							if ($exception)
								$msg .= $exception->faultstring;

								// If you desire to retrieve SOAP IN / OUT XML
								//  - Follow directions below
								//  - if not, leave as is

								//echo $msg . "\n";
								return $msg;
								//    }   //UN-comment this line to return SOAP XML
						}   //Comment this line to return SOAP XML
						/**/
					}
				}
				]]></add>
			</operation>
			<operation>
				<search position="after" offset="5" ><![CDATA[public function addReturn($data) {			      	]]></search>
				<add><![CDATA[
				if($this->config->get('config_avatax_tax_calculation'))
				{
					$time_start = round(microtime(true) * 1000);
					//$return_last_insert_id = $this->db->getLastId();

					$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$data['order_id'] . "'");

					$order_products = array();
					if ($order_query->num_rows) {
						$product_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_product` LEFT JOIN `" . DB_PREFIX . "product` ON(" . DB_PREFIX . "order_product.product_id=" . DB_PREFIX . "product.product_id)  WHERE order_id = '" . (int)$data['order_id'] . "'");

						$order_products = $product_query->rows;
					}

					//$ReturnOrderDocCode = $data['order_id'].".".$this->getReturnOrderDocCode($data['order_id']);
					//$ReturnOrderDocCode = $this->getReturnOrderDocCode($data['order_id']);
					//$data["avatax_return_document_code"] = $ReturnOrderDocCode;

					//echo "<br>Last ID: ".$return_id." Data: ";
					//print_r($data);
					//exit;
					$data["avatax_return_document_code"] = $this->getReturnOrderDocCode($data['order_id']);
					
					$connectortime = round(microtime(true) * 1000)-$time_start;
					
					$TaxHistoryReturnValue = $this->AvaTaxGetTaxHistory($order_query);
					
					$time_start = round(microtime(true) * 1000);
					$time_start = $time_start + $connectortime;
					
					require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');	
					$ReturnsReturnValue = $this->AvaTaxReturnInvoice($order_query, $order_products, $data, $TaxHistoryReturnValue);

					if(is_array($ReturnsReturnValue))
					{
						$this->editReturnWithAvaTaxDocCode($ReturnsReturnValue['GetTaxDocCode'], $return_id);
						/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime= $connectortime- $latency;
						
						$application_log->metric('GetTax123 '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			
					}
				}
				]]></add>
			</operation>
		</file>
	<!-- Return Handling - Admin Section STARTS -->
		<file name="admin/model/sale/return.php">
			<operation>
				<search position="after" ><![CDATA[public function editReturn($return_id, $data) {]]></search>
				<add><![CDATA[

				$return_details = $this->getReturn($return_id);
		
		if(!($return_details["avatax_return_document_code"] == "" || is_null($return_details["avatax_return_document_code"])))
		{       


				if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
				{
					$time_start = round(microtime(true) * 1000);
					$return_details = $this->getReturn($return_id);

					if(count($return_details) > 0)
					{
						$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$return_details["order_id"] . "'");
						if($order_query->row['avatax_paytax_error_message'] == 'Success')
						{
							$order_products = array();
							if ($order_query->num_rows) {
								$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product LEFT JOIN " . DB_PREFIX . "product ON(" . DB_PREFIX . "order_product.product_id=" . DB_PREFIX . "product.product_id) WHERE order_id = '" . (int)$return_details["order_id"] . "'");

								$order_products = $product_query->rows;
							}

							$data["product"] = $return_details["product"];
							$data["quantity"] = $return_details["quantity"];
							$data["return_reason_id"] = $return_details["return_reason_id"];
							$data["avatax_return_document_code"] = $return_details["avatax_return_document_code"];
							
							$connectortime = round(microtime(true) * 1000)-$time_start;
							
							if($return_details["return_status_id"] == 3){
								$cancelCode = "DocDeleted";
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								if($CancelTaxValue === 'Success')
								{
									$this->session->data['avatax_return_error_message'] = 'Success';
								}
								else
								{
									$this->session->data['avatax_return_error_message'] = '<b>Avatax Error5 : </b>'.$CancelTaxValue;
								}
							}

							$TaxHistoryReturnValue = $this->AvaTaxGetTaxHistory($order_query);
							
							$time_start = round(microtime(true) * 1000);
							$time_start = $time_start + $connectortime;
							
							require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');	
						    $ReturnsReturnValue = $this->AvaTaxReturnInvoice($order_query, $order_products, $data, $TaxHistoryReturnValue);
							if(is_array($ReturnsReturnValue))
							{
								$this->session->data['avatax_return_error_message'] = 'Success';
								/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime= $connectortime- $latency;
						
						$application_log->metric('GetTax123 '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			
							}
							else
							{
							   $this->session->data['avatax_return_error_message'] = '<b>Avatax Error6 : </b>'.$ReturnsReturnValue;
							}
						}
						else
						{
							$this->session->data['avatax_return_error_message'] = '<b>Avatax Error7 : </b>'.$order_query->row['avatax_paytax_error_message'];
						}
					}
				}
				
			
				/*if($this->config->get('config_avatax_tax_calculation') && $this->config->get('config_avatax_transaction_calculation'))
				{
					$return_details = $this->getReturn($return_id);

					$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$data['order_id'] . "'");
				   if($order_query->row['avatax_paytax_error_message'] == 'Success')
					{
						if($return_details["avatax_return_document_code"] == "" || is_null($return_details["avatax_return_document_code"]))
						{
							$this->db->query("UPDATE `" . DB_PREFIX . "return` SET avatax_return_document_code = '" . $return_details['return_id'] . "' WHERE return_id = '" . $return_details['return_id'] . "'");
							$return_details["avatax_return_document_code"] =  $return_details['return_id'];
							
								if($return_details["return_status_id"] == '3'){
								$cancelCode = "DocDeleted";
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								if($CancelTaxValue === 'Success')
								{
									$this->session->data['avatax_return_error_message'] = 'Success';
								}
								else
								{
									$this->session->data['avatax_return_error_message'] = '<b>Avatax Error1 : </b>'.$CancelTaxValue;
								}
							}
						}
						$order_products = array();
						if ($order_query->num_rows) {
							$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$data['order_id'] . "'");

							$order_products = $product_query->rows;
						}
						
			
			
			$data["avatax_return_document_code"] = $return_details["avatax_return_document_code"];

						$TaxHistoryReturnValue = $this->AvaTaxGetTaxHistory($order_query);
						
						require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');	
						$ReturnsReturnValue = $this->AvaTaxReturnInvoice($order_query, $order_products, $data, $TaxHistoryReturnValue);
					
						if(is_array($ReturnsReturnValue))
						{
							$this->session->data['avatax_return_error_message'] = 'Success';
							
							
						}
						else
						{
							$this->session->data['avatax_return_error_message'] = '<b>Avatax Error2 : </b>'.$ReturnsReturnValue;
						}
					}
					else
					{
						if(!empty($order_query->row['avatax_paytax_error_message'])){
							$this->session->data['avatax_return_error_message'] = '<b>Avatax Error3 : </b>'.$order_query->row['avatax_paytax_error_message'];
						}
					}
				}*/
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
				$this->db->query("UPDATE `" . DB_PREFIX . "return` SET return_status_id = '" . (int)$data['return_status_id'] . "', date_modified = NOW() WHERE return_id = '" . (int)$return_id . "'");

			$this->db->query("INSERT INTO " . DB_PREFIX . "return_history SET return_id = '" . (int)$return_id . "', return_status_id = '" . (int)$data['return_status_id'] . "', notify = '" . (isset($data['notify']) ? (int)$data['notify'] : 0) . "', comment = '" . $this->db->escape(strip_tags($data['comment'])) . "', date_added = NOW()");

		}
		
				]]></add>
			</operation>
			<operation>
				<search position="after" ><![CDATA[public function addReturnHistory($return_id, $data) {]]></search>
				<add><![CDATA[
				if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
				{
					$time_start = round(microtime(true) * 1000);
					$return_details = $this->getReturn($return_id);

					if(count($return_details) > 0)
					{
						$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$return_details["order_id"] . "'");
						if($order_query->row['avatax_paytax_error_message'] == 'Success')
						{
							$order_products = array();
							if ($order_query->num_rows) {
								$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product LEFT JOIN " . DB_PREFIX . "product ON(" . DB_PREFIX . "order_product.product_id=" . DB_PREFIX . "product.product_id) WHERE order_id = '" . (int)$return_details["order_id"] . "'");

								$order_products = $product_query->rows;
							}

							$data["product"] = $return_details["product"];
							$data["quantity"] = $return_details["quantity"];
							$data["return_reason_id"] = $return_details["return_reason_id"];
							$data["avatax_return_document_code"] = $return_details["avatax_return_document_code"];
							
							$connectortime = round(microtime(true) * 1000)-$time_start;
							
							if($return_details["return_status_id"] == 3){
								$cancelCode = "DocDeleted";
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								$CancelTaxValue = $this->AvaTaxCancelTax($return_details["avatax_return_document_code"],$cancelCode);
								if($CancelTaxValue === 'Success')
								{
									$this->session->data['avatax_return_error_message'] = 'Success';
								}
								else
								{
									$this->session->data['avatax_return_error_message'] = '<b>Avatax Error : </b>'.$CancelTaxValue;
								}
							}

							$TaxHistoryReturnValue = $this->AvaTaxGetTaxHistory($order_query);
							
							$time_start = round(microtime(true) * 1000);
							$time_start = $time_start + $connectortime;
							require_once(DIR_SYSTEM . 'AvaTax4PHP/classes/SystemLogger.class.php');	
						    
							$ReturnsReturnValue = $this->AvaTaxReturnInvoice($order_query, $order_products, $data, $TaxHistoryReturnValue);
							if(is_array($ReturnsReturnValue))
							{
								$this->session->data['avatax_return_error_message'] = 'Success';
								
								/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime= $connectortime- $latency;
						
						$application_log->metric('GetTax123 '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			
								
							}
							else
							{
								$this->session->data['avatax_return_error_message'] = '<b>Avatax Error : </b>'.$ReturnsReturnValue;
							}
						}
						else
						{
							$this->session->data['avatax_return_error_message'] = '<b>Avatax Error : </b>'.$order_query->row['avatax_paytax_error_message'];
						}
					}
				}
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
				]]></add>
			</operation>
			<operation>
				<search position="after">
					<![CDATA[public function deleteReturn($return_id) {]]>
				</search>
				<add>
					<![CDATA[

					if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
					{
						$avatax_return_document_code = $this->db->query("SELECT `avatax_return_document_code` FROM `" . DB_PREFIX . "return` WHERE return_id = '" . (int)$return_id . "'");
						$avatax_return_document_code = $avatax_return_document_code->row;
						$avatax_return_document_code = $avatax_return_document_code['avatax_return_document_code'];
						$cancelCode = "DocVoided";
						$CancelTaxValue = $this->AvaTaxCancelTax($avatax_return_document_code,$cancelCode);
						if($CancelTaxValue === 'Success')
						{
							$this->session->data['avatax_return_error_message'] = 'Success';
						}
						else
						{
							$this->session->data['avatax_return_error_message'] = '<b>Avatax Error : </b>'.$CancelTaxValue;
						}
					}
					]]>
				</add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[public function getTotalReturnHistoriesByReturnStatusId($return_status_id) {]]></search>
				<add><![CDATA[
				public function getProductOriginalPrice($product_id) {
					$product_price_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$product_id . "'");
					if($product_price_query->row["tax_class_id"] > 0)
					{
						$Taxcodetitle = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class WHERE tax_class_id = '" . (int)$product_price_query->row["tax_class_id"] . "'");
						$taxcode = $Taxcodetitle->row['title'];
					}
					else
					{
						$taxcode = '';
					}
					if ($product_price_query->num_rows) {
						//$price = $product_price_query->row['price'];
						 $Product_price_taxcode = array(
							 'product_price'                => $product_price_query->row['price'],
							 'tax_class_title'              => $taxcode,
					 );
				 }
				 return $Product_price_taxcode;
			  }

				public function AvaTaxGetTaxHistory($OrderInformation) {

					$environment = 'Development';
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else 
						$environment = "Production";

					$order_data = array();
					$dateTime = new DateTime();
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "SalesInvoice";
					$order_data["DocCode"] = $OrderInformation->row['avatax_paytax_document_code'];

					include_once(DIR_SYSTEM . 'AvaTax4PHP/get_tax_history.php');
					$return_message = GetTaxHistory($order_data);

					return $return_message;
				}

				public function AvaTaxCancelTax($AvaTaxDocumentCode, $CancelCode) {

					$environment = 'Development';
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else 
						$environment = "Production";
					$order_data = array();
					$dateTime = new DateTime();
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "ReturnInvoice";
					$order_data["DocCode"] = $AvaTaxDocumentCode;
					$order_data["CancelCode"] = $CancelCode;

					include_once(DIR_SYSTEM . 'AvaTax4PHP/cancel_tax.php');
					$return_message = CancelTax($order_data);

					return $return_message;
				}

				public function getCountry($country_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "country WHERE country_id = '" . (int)$country_id . "'");

					return $query->row;
				}

				public function getZone($zone_id) {
					$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "zone WHERE zone_id = '" . (int)$zone_id . "'");

					return $query->row;
				}

				public function getCategories($product_id) {
					$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category pc LEFT JOIN " . DB_PREFIX . "category_description cd ON (pc.category_id = cd.category_id) WHERE pc.product_id = '" . (int)$product_id . "'");

					$product_categories = "";
					foreach($query->rows as $row)
					{
						$product_categories .= $row["name"].", ";
					}
					return $product_categories;
				}

				public function AvaTaxReturnInvoice($order_query, $products, $data, $tax_history_data) {

					if ($order_query->num_rows) {

						include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

						global $registry;
						$this->cart = $registry->get('cart');

						$environment = 'Development';

						$service_url = $this->config->get('config_avatax_service_url');
						$account = $this->config->get('config_avatax_account');
						$license = $this->config->get('config_avatax_license_key');
						$client = $this->config->get('config_avatax_client');

						if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
							$environment = "Development";
						else 
							$environment = "Production";

						new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

						if($order_query->row["customer_id"]>0) {
							$CustomerCode = $order_query->row["customer_id"];
						}
						else {
							$CustomerCode = $order_query->row["customer_group_id"];
						}

						$origin_country_details = $this->getCountry($this->config->get('config_country_id'));
						$origin_zone_details = $this->getZone($this->config->get('config_zone_id'));

						$OrigAddress = $this->config->get('config_address');
						$OrigCity = $this->config->get('config_city');
						$OrigRegion = $origin_zone_details["code"];
						$OrigPostalCode = $this->config->get('config_postal_code');
						$OrigCountry = $origin_country_details["iso_code_2"];

						if(!empty($order_query->row["shipping_country_id"]))
						{
							$dest_country_details = $this->getCountry($order_query->row["shipping_country_id"]);
							$dest_zone_details = $this->getZone($order_query->row["shipping_zone_id"]);

							$DestAddress = $order_query->row["shipping_address_1"];
							$DestCity = $order_query->row["shipping_city"];
							$DestRegion = $dest_zone_details["code"];
							$DestPostalCode = $order_query->row["shipping_postcode"];
							$DestCountry = $dest_country_details["iso_code_2"];
						}
						else
						{
							$dest_country_details = $this->getCountry($order_query->row["payment_country_id"]);
							$dest_zone_details = $this->getZone($order_query->row["payment_zone_id"]);

							$DestAddress = $order_query->row["payment_address_1"];
							$DestCity = $order_query->row["payment_city"];
							$DestRegion = $dest_zone_details["code"];
							$DestPostalCode = $order_query->row["payment_postcode"];
							$DestCountry = $dest_country_details["iso_code_2"];
						}

						$CompanyCode = $this->config->get('config_avatax_company_code');
						$DocType = $this->config->get('config_avatax_transaction_calculation');
						if($DocType == 1){
							$DocType = "ReturnInvoice";
						}else{
							$DocType = "ReturnOrder";
						}
						//$DocCode = $order_query->row['avatax_paytax_document_code'];
						$DocCode = $data['avatax_return_document_code'];

						$SalesPersonCode = "";
						$EntityUseCode = "";
						$Discount = 0;
						$PurchaseOrderNo = '';
						$ExemptionNo = "";
						$LocationCode = '';
						$LineNo = 1;

						$client = new TaxServiceSoap($environment);
						$request = new GetTaxRequest();
						$dateTime = new DateTime();
						$request->setCompanyCode($CompanyCode);
						$request->setDocType($DocType);
						$request->setDocCode($DocCode);
						$request->setDocDate(date_format($dateTime, "Y-m-d"));
						$request->setSalespersonCode($SalesPersonCode);
						$request->setCustomerCode($CustomerCode);
						$request->setCustomerUsageType($EntityUseCode);
						$request->setDiscount($Discount);
						$request->setPurchaseOrderNo($PurchaseOrderNo);
						$request->setExemptionNo($ExemptionNo);
						$request->setDetailLevel(DetailLevel::$Tax);
						$request->setLocationCode($LocationCode);

						//Return Status = Complete then Committed else Uncommitted
						if($data['return_status_id']==3) $request->setCommit(TRUE);
						else $request->setCommit(FALSE);

						//Add Origin Address
						$origin = new Address();
						$origin->setAddressCode(0);
						$origin->setLine1($OrigAddress);
						$origin->setLine2("");
						$origin->setCity($OrigCity);
						$origin->setRegion($OrigRegion);
						$origin->setPostalCode($OrigPostalCode);
						$origin->setCountry($OrigCountry);
						$request->setOriginAddress($origin);

						// Add Destination Address
						$destination = new Address();
						$destination->setAddressCode(1);
						$destination->setLine1($DestAddress);
						$destination->setLine2("");
						$destination->setCity($DestCity);
						$destination->setRegion($DestRegion);
						$destination->setPostalCode($DestPostalCode);
						$destination->setCountry($DestCountry);
						$request->setDestinationAddress($destination);

						// Line level processing
						$Ref1 = '';
						$Ref2 = '';
						$ExemptionNo = '';
						$RevAcct = '';
						$EntityUseCode = '';

						$lines = array();
						$product_total = 0;
						$i = 0;
						$discount_amount = 0;

						$avatax_discount_amount = 0;
						$TaxCode = 0;

						//print_r($products);
						//exit;
						foreach($products as $product) {

							if(trim($data['product']) == trim($product["name"]))
							{
								$Product_detail = $this->getProductOriginalPrice($product["product_id"]);
								/*$product_original_amount = $Product_detail['product_price'];
								$total_amount = ($product_original_amount * $data["quantity"]);*/
								$total_amount = $product["price"]*$data["quantity"];
								$Description = $this->getCategories($product["product_id"]);
								//$TaxCode = substr($product["name"], 0, 24);
								if(isset($Product_detail['tax_class_title']) || $Product_detail['tax_class_title']!= null)
								{
									if($Product_detail["tax_class_title"] == 'Non Taxable')
									{
										$TaxCode = 'NT';
									}
									else
									{
										$TaxCode = $Product_detail["tax_class_title"];
									}
								}
								else
								{
									 $TaxCode = '';
								}

								//Product Discount
								$this->load->model('catalog/product');
								//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
								$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"],$order_query->row["date_added"], $order_query->row["customer_group_id"]);

								$discount_count = 0;
								$discount_amount = 0;
								foreach($product_discount as $discount) {
									$discount_amount += $discount["price"];
									$discount_count++;
								}

								$line1 = new Line();
								$line1->setNo(1);

								//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number
								//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
								if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
								{
									$line1->setItemCode("UPC:".$product["upc"]);
								}
								elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
								{
									$line1->setItemCode(substr($product["sku"],0,50));
								}
								else
								{
									$line1->setItemCode(substr($product["model"],0,50));
								}

								$line1->setDescription($Description);
								$line1->setTaxCode($TaxCode);
								//$line1->setQty($product["quantity"]);
								$line1->setQty($data["quantity"]);
								//$line1->setAmount(-$product["total"]);
								$line1->setAmount(-$total_amount);
								/*if($discount_count>0) $line1->setDiscounted(true);
								else $line1->setDiscounted(false);*/
								$line1->setDiscounted(true);
								$line1->setRevAcct($RevAcct);
								$line1->setRef1($Ref1);
								$line1->setRef2($Ref2);
								$line1->setExemptionNo($ExemptionNo);
								$line1->setCustomerUsageType($EntityUseCode);
								$line1->setOriginAddress($origin);
								$line1->setDestinationAddress($destination);

								$lines[$i] = $line1;
								$i++;
								//if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $product["quantity"]);
								if($discount_count>0) $avatax_discount_amount += (($product_original_amount - $discount_amount) * $data["quantity"]);
								$product_total += $product['quantity'];
							}
						}

						//$request->setLines(array($lines));
						$request->setLines($lines);
						//print_r($request);
						//$request->setDiscount(-$avatax_discount_amount);
						$request->setDiscount('0');

						$this->load->model('localisation/return_reason');
						$return_reason = $this->model_localisation_return_reason->getReturnReason($data["return_reason_id"]);

						$TaxOverride = new TaxOverride();
						//$TaxOverride->setTaxOverrideType($tax_history_data["TaxDate"]);
						$TaxOverride->setTaxOverrideType("TaxDate");
						$TaxOverride->setTaxDate($tax_history_data["DocDate"]);
						$TaxOverride->setReason($return_reason["name"]);
						$request->setTaxOverride($TaxOverride);

						$GetTaxData = array();
						$returnMessage = "";

						try {
			
			if (!empty($DestAddress)) {
			
            //$connectortime = round(microtime(true) * 1000)-$time_start;
            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['getTaxLines'] = "" ;
			$this->session->data['getDocType'] = "" ;
			$this->session->data['getDocCode'] = "" ;
			$this->session->data['latency'] = $latency ;
			$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
			$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
			$this->session->data['getDocCode'] = $getTaxResult->getDocCode();
			
				
				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {

					$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
					$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
					$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
					$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();

					

					//Added for connector metrics
					/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
				
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    

                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
				
					
					return $GetTaxData;

				} else {

					foreach ($getTaxResult->getMessages() as $msg) {
						//echo $msg->getName() . ": " . $msg->getSummary() . "\n";
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
					}
					return $returnMessage;
				}
				} 
				}catch (SoapFault $exception) {
							$msg = "Exception: ";
							if ($exception)
								$msg .= $exception->faultstring;

								// If you desire to retrieve SOAP IN / OUT XML
								//  - Follow directions below
								//  - if not, leave as is

								//echo $msg . "\n";
								return $msg;
								//    }   //UN-comment this line to return SOAP XML
						}   //Comment this line to return SOAP XML
						/**/
					}
				}
				]]></add>
			</operation>
		</file>

		<file name="system/library/cart.php">
			<operation>
				<search position="before" ><![CDATA[if ($product_query->num_rows) {]]></search>
				<add><![CDATA[
					if($product_query->row["tax_class_id"] > 0)
					{
						$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $product_query->row["tax_class_id"] . "'");
					}
				]]></add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[$this->data[$key] = array(]]></search>
				<add><![CDATA[
						if($product_query->row["tax_class_id"] > 0)
						{
							$taxcode = $TaxClasses->row['title'];
						}
						else
						{
							$taxcode = '';
						}
				]]></add>
			</operation>
			<operation>
				<search position="after" ><![CDATA['tax_class_id'    => $product_query->row['tax_class_id'],]]></search>
				<add><![CDATA[
				'tax_class_title'           => $taxcode,
				]]></add>
			</operation>

			<!--UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number -->
			<operation>
				<search position="after" ><![CDATA['model'           => $product_query->row['model'],]]></search>
				<add><![CDATA['upc'                     => $product_query->row['upc'],
				'sku'                     => $product_query->row['sku'],]]></add>
			</operation>

			<operation><!--Operation modified-->
				<search position="before" ><![CDATA[public function add($product_id, $qty = 1, $option = array(), $recurring_id = 0) {]]></search>
				<add><![CDATA[
		public function getProductForQuantity($product_id, $quantity) {
			if ($this->customer->isLogged()) {
				$customer_group_id = $this->customer->getGroupId();
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');
			}	
			
			//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number. Added p.upc & p.sku in select field & return array.
			$query = $this->db->query("SELECT pd.*, p.model, p.upc, p.sku, pdes.name FROM " . DB_PREFIX . "product_discount pd LEFT JOIN " . DB_PREFIX . "product p on p.product_id = '" . (int)$product_id . "' LEFT JOIN " . DB_PREFIX . "product_description pdes ON pdes.product_id = '" . (int)$product_id . "' WHERE pd.product_id = '" . (int)$product_id . "' AND pd.customer_group_id = '" . (int)$customer_group_id . "' AND pd.quantity <= '" . (int)$quantity . "' AND ((pd.date_start = '0000-00-00' OR pd.date_start < NOW()) AND (pd.date_end = '0000-00-00' OR pd.date_end > NOW())) ORDER BY pd.quantity ASC, pd.priority ASC, pd.price ASC");
			
			if ($query->num_rows) {
				return array(
					'product_id'       => $query->row['product_id'],
					'name'             => $query->row['name'],
					'model'            => $query->row['model'],
					'upc'              => $query->row['upc'],
					'sku'              => $query->row['sku'],
					'quantity'         => $query->row['quantity'],				
					'price'            => $query->row['price']
				);
			} else {
				return false;
			}
			
			return $query->rows;		
		}
		
		public function getProduct($product_id) {
			if ($this->customer->isLogged()) {
				$customer_group_id = $this->customer->getGroupId();
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');
			}	

			//UPC/SKU Code Added by Vijay on 10th Dec 2014. If UPC/SKU code is selected & it is available for that product, it will be passed else Model number. Added p.upc & p.sku code in select field & return array
			$query = $this->db->query("SELECT DISTINCT *, pd.name AS name, p.image, p.upc, p.sku, m.name AS manufacturer, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$customer_group_id . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$customer_group_id . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, (SELECT points FROM " . DB_PREFIX . "product_reward pr WHERE pr.product_id = p.product_id AND customer_group_id = '" . (int)$customer_group_id . "') AS reward, (SELECT ss.name FROM " . DB_PREFIX . "stock_status ss WHERE ss.stock_status_id = p.stock_status_id AND ss.language_id = '" . (int)$this->config->get('config_language_id') . "') AS stock_status, (SELECT wcd.unit FROM " . DB_PREFIX . "weight_class_description wcd WHERE p.weight_class_id = wcd.weight_class_id AND wcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS weight_class, (SELECT lcd.unit FROM " . DB_PREFIX . "length_class_description lcd WHERE p.length_class_id = lcd.length_class_id AND lcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS length_class, (SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "review r2 WHERE r2.product_id = p.product_id AND r2.status = '1' GROUP BY r2.product_id) AS reviews, p.sort_order FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) LEFT JOIN " . DB_PREFIX . "manufacturer m ON (p.manufacturer_id = m.manufacturer_id) WHERE p.product_id = '" . (int)$product_id . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");
			
			if ($query->num_rows) {
				return array(
					'product_id'       => $query->row['product_id'],
					'name'             => $query->row['name'],
					'model'            => $query->row['model'],
					'upc'              => $query->row['upc'],
					'sku'              => $query->row['sku'],
					'quantity'         => $query->row['quantity'],
					'price'            => ($query->row['discount'] ? $query->row['discount'] : $query->row['price'])
				);
			} else {
				return false;
			}
		}	
		
		public function getCountry($country_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "country WHERE country_id = '" . (int)$country_id . "'");
			
			return $query->row;
		}

		public function getZone($zone_id) {
			$query = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "zone WHERE zone_id = '" . (int)$zone_id . "'");
			
			return $query->row;
		}
		
		public function AvaTaxAmount($price) {				
			
			//echo "In PHP AvaTaxAmount1 function";
			require_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');	
			
			global $registry;
			$this->cart = $registry->get('cart');		
			
			$environment = 'Development';
			
			$service_url = $this->config->get('config_avatax_service_url');		
			$account = $this->config->get('config_avatax_account');
			$license = $this->config->get('config_avatax_license_key');		
			$client = $this->config->get('config_avatax_client');
			
			if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
				$environment = "Development";
			else 
				$environment = "Production";
			new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));
			
			//Variable Mapping
			if ($this->customer->isLogged()) {			
				
				$customer_address = $this->customer->getAddress($this->customer->getAddressId());
				
				$CustomerCode = $customer_address["customer_id"];
				$OrigAddress = $customer_address["address_1"];
				$OrigCity = $customer_address["city"];
				$OrigRegion = $customer_address["zone_code"];
				$OrigPostalCode = $customer_address["postcode"];
				$OrigCountry = $customer_address["iso_code_2"];
				
				$DestAddress = $customer_address["address_1"];
				$DestCity = $customer_address["city"];
				$DestRegion = $customer_address["zone_code"];
				$DestPostalCode = $customer_address["postcode"];
				$DestCountry = $customer_address["iso_code_2"];
				
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');
				
				$country_details = $this->getCountry($this->config->get('config_country_id'));		
				$zone_details = $this->getZone($this->config->get('config_zone_id'));
				
				$CustomerCode = $this->config->get('config_account_id');
				$OrigAddress = $this->config->get('config_address');
				$OrigCity = $this->config->get('config_city');
				$OrigRegion = $zone_details["code"];
				$OrigPostalCode = $this->config->get('config_postal_code');
				$OrigCountry = $country_details["iso_code_2"];
				
				$DestAddress = $this->config->get('config_address');
				$DestCity = $this->config->get('config_city');
				$DestRegion = $zone_details["code"];
				$DestPostalCode = $this->config->get('config_postal_code');
				$DestCountry = $country_details["iso_code_2"];
			}
			
			$CompanyCode = $this->config->get('config_avatax_company_code');
			$DocType = "SalesOrder";
			//$DocCode = $this->config->get('config_invoice_prefix').$this->config->get('config_account_id'); 
			$a = session_id();
			if(empty($a)) session_start();
			
			//$DocCode = session_id(); 
			$DocCode = "cartphp"; 
			$SalesPersonCode = "";		
			$EntityUseCode = "";
			$Discount = 0;
			$PurchaseOrderNo = '';
			$ExemptionNo = "";
			$LocationCode = '';		
			$LineNo = 1;
			
			$client = new TaxServiceSoap($environment);
			$request = new GetTaxRequest();
			$dateTime = new DateTime();                                  
			//$request->setDocDate($DocDate);               
			$request->setCompanyCode($CompanyCode);                    
			$request->setDocType($DocType);                           
			$request->setDocCode($DocCode);                          
			$request->setDocDate(date_format($dateTime, "Y-m-d"));  
			$request->setSalespersonCode($SalesPersonCode);        
			$request->setCustomerCode($CustomerCode);             
			$request->setCustomerUsageType($EntityUseCode);      
			$request->setDiscount($Discount);                	
			$request->setPurchaseOrderNo($PurchaseOrderNo);    
			$request->setExemptionNo($ExemptionNo);           
			$request->setDetailLevel(DetailLevel::$Tax);     
			$request->setLocationCode($LocationCode);       
			$request->setCommit(FALSE);                    

			//Add Origin Address
			$origin = new Address();                      
			$origin->setLine1($OrigAddress);              
			$origin->setLine2("");                        
			$origin->setCity($OrigCity);                  
			$origin->setRegion($OrigRegion);              
			$origin->setPostalCode($OrigPostalCode);      
			$origin->setCountry($OrigCountry);            
			$request->setOriginAddress($origin);          

			// Add Destination Address
			$destination = new Address();                 
			$destination->setLine1($DestAddress);         
			$destination->setLine2("");                   
			$destination->setCity($DestCity);             
			$destination->setRegion($DestRegion);         
			$destination->setPostalCode($DestPostalCode); 
			$destination->setCountry($DestCountry);       
			$request->setDestinationAddress($destination);
			
			//
			// Line level processing		
			$Ref1 = '';
			$Ref2 = '';
			$ExemptionNo = '';
			$RevAcct = '';		
			$EntityUseCode = '';
			
			$lines = array();		
			$product_total = 0;			
			$i = 0;
			//$products = $this->cart->getProducts();	
			//foreach ($products as $product) {
			
				//$TaxCode = $product["model"];
				$TaxCode = "Product1";
				$line1 = new Line();                                
				$line1->setNo(1);//$product["product_id"]
				$line1->setItemCode("Product1");
				$line1->setDescription("ProductName1");
				$line1->setTaxCode($TaxCode);
				$line1->setQty(1);
				$line1->setAmount($price);
				$line1->setDiscounted(true);
				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);

				$lines[0] = $line1;
				$i++;
				//$product_total += $product['quantity'];
			//}
			
			//$request->setLines(array($lines));
			$request->setLines($lines);
			//print_r($request);
			$returnMessage = "";
			try {
			if (!empty($DestAddress)) {

            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['latency'] = $latency ;
				
				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {
				
				
				/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
				
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    

                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
				
					return $getTaxResult;
					
					// If NOT success - display error messages to console
					// it is important to itterate through the entire message class        
							  
				} else {
					foreach ($getTaxResult->getMessages() as $msg) {
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
					}
					return 0;
				}
				}
			} catch (SoapFault $exception) {
				$returnMessage = "Exception: ";
				if ($exception)
					$returnMessage .= $exception->faultstring;
				return 0;
					
			}   //Comment this line to return SOAP XML		
		}	
				]]></add>
			</operation>		
			<operation>
				<search position="before" ><![CDATA[foreach ($this->getProducts() as $product) {]]></search>
				<add><![CDATA[$this->session->data['ava_taxrate'] = 'F';]]></add>
			</operation>
			
			<operation>
				<search position="replace" ><![CDATA[if ($product['tax_class_id']) {]]></search>
				<add><![CDATA[if ($product['tax_class_id'] || $product['tax_class_id'] >= 0) {]]></add>
			</operation>
			<operation>
				<search position="replace" ><![CDATA[if (!isset($tax_data[$tax_rate['tax_rate_id']])) {]]></search>
				<add><![CDATA[if (!isset($tax_data[0])) {]]></add>
			</operation>
			<operation>
				<search position="replace" ><![CDATA[$tax_data[$tax_rate['tax_rate_id']] = ($tax_rate['amount'] * $product['quantity'])]]></search>
				<add><![CDATA[$tax_data[0] = ($tax_rate['amount'] * 1)]]></add>
			</operation>
			<operation>
				<search position="replace" ><![CDATA[$tax_data[$tax_rate['tax_rate_id']] += ($tax_rate['amount'] * $product['quantity']);]]></search>
				<add><![CDATA[$tax_data[0] += ($tax_rate['amount'] * 1);]]></add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[return $tax_data;]]></search>
				<add><![CDATA[
				if(($this->session->data['ava_taxrate']) == 'T')
				{
					$tax_data[0] = '0';
					$this->session->data['ava_taxrate'] = 'F';
				}
				]]></add>
			</operation>
		</file>
		<file name="catalog/controller/checkout/success.php">
			<operation>
				<search position="after" ><![CDATA[unset($this->session->data['vouchers']);]]></search>
				<add><![CDATA[unset($this->session->data['avatax_tax']);
				unset($this->session->data['coupon_amount']);
				unset($this->session->data['coupon_info']);
				unset($this->session->data['shipping_address_id']);]]></add>
			</operation>
		</file>	
		<file name="catalog/controller/account/logout.php">
			<operation>
				<search position="after"><![CDATA[unset($this->session->data['coupon']);]]></search>
				<add><![CDATA[unset($this->session->data['avatax_tax']);
				unset($this->session->data['coupon_amount']);
				unset($this->session->data['coupon_info']);
				unset($this->session->data['shipping_address_id']);]]></add>
			</operation>
		</file>
		<file name="catalog/controller/account/login.php">
			<operation>
				<search position="after" ><![CDATA[if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) {]]></search>
				<add><![CDATA[if(isset($this->session->data['avatax_tax'])){
							unset($this->session->data['avatax_tax']);}
							if(isset($this->session->data['coupon_amount'])){
							unset($this->session->data['coupon_amount']);}
							if(isset($this->session->data['coupon_info'])){
							unset($this->session->data['coupon_info']);}
							]]></add>
			</operation>
		</file>
		<file name="admin/controller/sale/return.php">
			<operation><!--Operation modified-->
				<search position="replace"><![CDATA[$data['success'] = $this->language->get('text_success');]]></search>
				<add><![CDATA[
				if(!empty($this->session->data['avatax_return_error_message']))
				{
					if($this->session->data['avatax_return_error_message'] == 'Success')
					{
						$data['success'] = $this->language->get('text_success');
					}
					else
					{
						$data['error'] = $this->session->data['avatax_return_error_message'];
						unset($this->session->data['avatax_return_error_message']);
					}
				}
					]]></add>
			</operation>
			<operation>
				<search position="replace" offset="2"><![CDATA[$this->model_sale_return->editReturn($this->request->get['return_id'], $this->request->post);]]></search>
				<add><![CDATA[
				$this->model_sale_return->editReturn($this->request->get['return_id'], $this->request->post);
				if(!empty($this->session->data['avatax_return_error_message']))
				{
					if($this->session->data['avatax_return_error_message'] == 'Success')
					{
						$this->session->data['success'] = $this->language->get('text_success');
					}
					else
					{
						$this->session->data['error'] = $this->session->data['avatax_return_error_message'];
						unset($this->session->data['avatax_return_error_message']);
					}
				}]]></add>
			</operation>

		</file>
		
		<!-- Return Handling - Admin Section ENDS -->
		<!--Not Solved-->
		<file name="catalog/model/checkout/order.php"><!--file modified from admin/model/sale/order.php to catalog/model/checkout/order.php-->
			<operation><!--Operation doesnt exist, exist in catalog/model/checkout/order.php-->
				<search position="after" ><![CDATA[public function addOrderHistory($order_id, $order_status_id, $comment = '', $notify = false) {]]></search>
				<add><![CDATA[
				if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
				{
					$order_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$order_id . "'");

					//Added Left join by Vijay on 11 Dec 2014 to fetch UPC & SKU details
					if ($order_query->num_rows) {
						$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product LEFT JOIN " . DB_PREFIX . "product ON(" . DB_PREFIX . "order_product.product_id=" . DB_PREFIX . "product.product_id)   WHERE order_id = '" . (int)$order_id . "'");

						//$existing_product_list = $product_query->rows;
						//$new_product_list = $data['order_product'];
						$new_product_list = $product_query->rows;
					}
					$data['order_status_id'] = $order_status_id;
					
					//echo "order: ".$order_query." Data: ".$data." Existing: ".$existing_product_list." New: ".$new_product_list;
					if(isset($new_product_list))
					{
						$this->AvaTaxChangeDocumentStatus($order_query, $data, $new_product_list);
					}
				}
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
				]]></add>
			</operation>
			<!--<operation>--><!--Operation doesnt exist -->
				<!--<search position="after" offset="1" ><![CDATA[// Restock]]></search>
				<add><![CDATA[
			if($this->config->get('config_avatax_tax_calculation'))
			{
				$existing_product_list = $product_query->rows;
				$new_product_list = $data['order_product'];
			}
				]]></add>
			</operation>-->
			<!--<operation>--><!--Operation doesnt exist in admin, exist in catalog/model/checkout/order.php
				<search position="before" offset="2" ><![CDATA[public function deleteOrder($order_id) {]]></search>
				<add><![CDATA[
			if($this->config->get('config_avatax_tax_calculation')&& $this->config->get('config_avatax_transaction_calculation'))
			{
				$this->AvaTaxChangeDocumentStatus($order_query, $data, $new_product_list);
			}
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
				]]></add>
			</operation>-->
			
			
			
			<operation><!--Operation doesnt exist in admin,  exist in catalog/model/checkout/order.php-->
				<search position="before" ><![CDATA[public function deleteOrder($order_id) {]]></search>
				<add><![CDATA[
		public function getAvaTaxDocumentStatus() {

			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_status");

			$avatax_document_status = array();
			foreach($query->rows as $row)
			{
				$avatax_document_status[$row["order_status_id"]] = $row["avatax_document_status"];
			}
			return $avatax_document_status;
		}

		public function DocumentStateVoided($order_query, $new_product_list)
		{
			$time_start = round(microtime(true) * 1000);
			
			//$AvaTaxDocumentStatus = array(1=>"Uncommitted", 2=>"Uncommitted", 3=>"Committed", 5=>"Committed", 7=>"Voided", 8=>"Voided", 9=>"Voided", 10=>"Voided", 11=>"Voided", 12=>"Voided", 13=>"Voided", 14=>"Voided", 15=>"Committed", 16=>"Voided");
			$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

			if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = DocVoided
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;	
				//2. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
				
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//3. Call CancelTax with CancelCode = DocVoided
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = DocDeleted
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;	
				//2. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);

				$connectortime = round(microtime(true) * 1000)-$time_start;
				//3. Call CancelTax with CancelCode = DocVoided
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = DocVoided
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;
				//2. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);

				$connectortime = round(microtime(true) * 1000)-$time_start;
				//3. Call CancelTax with CancelCode = DocVoided
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				
			}
			 if(is_array($DocCommittedReturn))
			{
			
			
			/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						//$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;
						
						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			
			
			
		
			}
		}

		public function DocumentStateUncommitted($order_query, $new_product_list){

			$time_start = round(microtime(true) * 1000);
			$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

			if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = Voided
				$DocVoidedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				//2. Call CancelTax with CancelCode = DocDeleted
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;				
				//3. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = DocDeleted
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;	
				//2. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
			{
				//1. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 0);
			}
			 if(is_array($DocCommittedReturn))
			{
				$this->updateOrderForAvaTaxFields(0, 0, $DocCommittedReturn["GetTaxDocCode"], "Success", $order_query->row['order_id']);
				
				/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;
						
						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			}
			else
			{
				$this->updateOrderForAvaTaxFields(0, 0, 0, $DocCommittedReturn, $order_query->row['order_id']);
			}
		}

		public function DocumentStateCommitted($order_query, $new_product_list){
			$time_start = round(microtime(true) * 1000);
			$AvaTaxDocumentStatus = $this->getAvaTaxDocumentStatus();

			if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Committed")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = Voided
				$DocVoidedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocVoided");
				//2. Call CancelTax with CancelCode = DocDeleted
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				//3. Call GetTax with Commit = False
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Voided")
			{
				$connectortime = round(microtime(true) * 1000)-$time_start;
				//1. Call CancelTax with CancelCode = DocDeleted
				$DocDeletedReturn = $this->AvaTaxCancelTax($order_query->row["avatax_paytax_document_code"], "DocDeleted");
				
				$time_start = round(microtime(true) * 1000);
				$time_start = $time_start + $connectortime;
				//2. Call GetTax with Commit = False
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
			}
			else if(trim($AvaTaxDocumentStatus[$order_query->row["order_status_id"]])=="Uncommitted")
			{
				//1. Call GetTax with Commit = True
				$DocCommittedReturn = $this->AvaTaxGetTax($order_query, $new_product_list, 1);
			}
			 if(is_array($DocCommittedReturn))
			{
				$this->updateOrderForAvaTaxFields(0, 0, $DocCommittedReturn["GetTaxDocCode"], "Success", $order_query->row['order_id']);
				
				/************* Logging code snippet (optional) starts here *******************/
						// System Logger starts here:
						
						$log_mode = $this->config->get('config_avatax_log');
						
						
						if($log_mode==1){
						   
									
							$timeStamp 			= 	new DateTime();						// Create Time Stamp
							$params				=   '[Input: ' . ']';		// Create Param List
							$u_name				=	'';							// Eventually will come from $_SESSION[] object
						
						
						// Creating the System Logger Object
						$application_log 	= 	new SystemLogger;
						$connectortime = round(microtime(true) * 1000)-$time_start;
						$latency = $this->session->data['latency'];
						$connectortime = $connectortime - $latency;
						
						$application_log->metric('GetTax '.$this->session->data['getDocType'],count($this->session->data['getTaxLines']),$this->session->data['getDocCode'],$connectortime,$latency);
						
						
							$latency =""  ;
							$this->session->data['latency'] ="";							
							$this->session->data['getTaxLines'] ="";							
							$this->session->data['getDocType'] ="";							
							$this->session->data['getDocCode'] ="";

							//	$application_log->WriteSystemLogToDB();							// Log info goes to DB
							// 	System Logger ends here
							//	Logging code snippet (optional) ends here
			
					}
			}
			else
			{
				$this->updateOrderForAvaTaxFields(0, 0, 0, $DocCommittedReturn, $order_query->row['order_id']);
			}
		}

			public function AvaTaxChangeDocumentStatus($order_query, $data, $new_product_list) {
				if($this->config->get('config_avatax_transaction_calculation')) {
					Switch($data["order_status_id"]) {
					case 0:
						break;
					case 1://Pending
						$this->DocumentStateUncommitted($order_query, $new_product_list);
						break;
					case 2://Processing
						$this->DocumentStateUncommitted($order_query, $new_product_list);
						break;
					case 3://Shipped
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 5://Complete
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 7://Cancelled
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 8://Denied
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 9://Canceled Reversal
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 10://Failed
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 11://Refunded
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 12://Reversed
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 13://Chargeback
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 14://Expired
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					case 15://Processed
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					case 16://Voided
						$this->DocumentStateVoided($order_query, $new_product_list);
						break;
					default://Default
						$this->DocumentStateCommitted($order_query, $new_product_list);
						break;
					}
				}
				else{
					$this->session->data['previous_error_status'] = "Success";
				}
			}

		public function AvaTaxGetTax($order_info, $products, $commit_status) {
			
			
			include_once(DIR_SYSTEM . 'AvaTax4PHP/AvaTax.php');

			global $registry;
			$this->cart = $registry->get('cart');

			$environment = 'Development';

			$service_url = $this->config->get('config_avatax_service_url');
			$account = $this->config->get('config_avatax_account');
			$license = $this->config->get('config_avatax_license_key');
			$client = $this->config->get('config_avatax_client');

			if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
				$environment = "Development";
			else 
				$environment = "Production";

			new ATConfig($environment, array('url'=>$service_url, 'account'=>$account,'license'=>$license, 'client'=>$client, 'trace'=> TRUE));

			//Variable Mapping
			/*if ($this->customer->isLogged()) {
				$customer_address = $this->customer->getAddress($this->customer->getAddressId());
				$CustomerCode = $customer_address["customer_id"];
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');

				//$CustomerCode = $this->config->get('config_account_id');
				$CustomerCode = $this->config->get('config_customer_group_id');
			}*/
			if($order_info->row["customer_id"]>0) {
				$CustomerCode = $order_info->row["customer_id"];
			}
			else {
				$CustomerCode = $order_info->row["customer_group_id"];
			}

			//$this->load->model('localisation/country');

			//$this->load->model('localisation/zone');

			//$country_details = $this->model_localisation_country->getCountry($data['shipping_country_id']);
			//$zone_details = $this->model_localisation_zone->getZone($this->config->get('config_zone_id'));

			$country_details = $this->getCountry($this->config->get('config_country_id'));
			$zone_details = $this->getZone($this->config->get('config_zone_id'));

			$OrigAddress = $this->config->get('config_address');
			$OrigCity = $this->config->get('config_city');
			$OrigRegion = $zone_details["code"];
			$OrigPostalCode = $this->config->get('config_postal_code');
			$OrigCountry = $country_details["iso_code_2"];

				if(isset($this->request->request["shipping_address_1"]))
				{
				$dest_country_details =  $this->getCountry($this->request->request["shipping_country_id"]);
				$dest_zone_details = $this->getZone($this->request->request["shipping_zone_id"]);

				$DestAddress = $this->request->request["shipping_address_1"];
				$DestCity =$this->request->request["shipping_city"];
				$DestPostalCode = $this->request->request["shipping_postcode"];
				$DestRegion = $dest_zone_details["code"];
				$DestCountry = $dest_country_details["iso_code_2"];
			}
			else{
			
			
			if(isset($order_info->row["shipping_address_1"]) && $order_info->row["shipping_address_1"]!="")
			{
		
				$DestAddress = $order_info->row["shipping_address_1"];
				$DestCity = $order_info->row["shipping_city"];
				$DestPostalCode = $order_info->row["shipping_postcode"];
				$DestRegion = $order_info->row["shipping_zone"];
				$DestCountry = $order_info->row["shipping_country"];
			}
				else
				{
				
				if(isset($this->request->request["payment_address_1"]))
				{
				
				$dest_country_details =  $this->getCountry($this->request->request["payment_country_id"]);
				$dest_zone_details = $this->getZone($this->request->request["payment_zone_id"]);

				$DestAddress = $this->request->request["payment_address_1"];
				$DestCity =$this->request->request["payment_city"];
				$DestPostalCode = $this->request->request["payment_postcode"];
				$DestRegion = $dest_zone_details["code"];
				$DestCountry = $dest_country_details["iso_code_2"];
			}
			else{
		
				$DestAddress = $order_info->row["payment_address_1"];
				$DestCity = $order_info->row["payment_city"];
				$DestPostalCode = $order_info->row["payment_postcode"];
				$DestRegion = $order_info->row["payment_zone"];
				$DestCountry = $order_info->row["payment_country"];
			}
				}
			}
			

		//	$dest_country_details =  $this->getCountry($this->request->request["shipping_country_id"]);
		//    $dest_zone_details = $this->getZone($this->request->request["shipping_zone_id"]);

		//    $DestAddress = $this->request->request["shipping_address_1"];
		 //   $DestCity =$this->request->request["shipping_city"];
		 //   $DestRegion = $dest_zone_details["code"];
		 //   $DestPostalCode = $this->request->request["shipping_postcode"];
		  //  $DestCountry = $dest_country_details["iso_code_2"];

			$CompanyCode = $this->config->get('config_avatax_company_code');
			$DocType = $this->config->get('config_avatax_transaction_calculation');
			if($DocType == 1){
				$DocType = "SalesInvoice";
			}else{
				$DocType = "SalesOrder";
			}
			//$DocType = "Any";
			$DocCode = $order_info->row['order_id'];
			$SalesPersonCode = "";
			$EntityUseCode = "";
			$Discount = 0;
			$PurchaseOrderNo = '';
			$ExemptionNo = "";
			$LocationCode = '';
			$LineNo = 1;

			$client = new TaxServiceSoap($environment);
			$request = new GetTaxRequest();
			$dateTime = new DateTime();
			//$request->setDocDate($DocDate);
			$request->setCompanyCode($CompanyCode);
			$request->setDocType($DocType);
			$request->setDocCode($DocCode);
			$request->setDocDate(date_format($dateTime, "Y-m-d"));
			$request->setSalespersonCode($SalesPersonCode);
			$request->setCustomerCode($CustomerCode);
			$request->setCustomerUsageType($EntityUseCode);
			$request->setDiscount($Discount);
			$request->setPurchaseOrderNo($PurchaseOrderNo);
			$request->setExemptionNo($ExemptionNo);
			$request->setDetailLevel(DetailLevel::$Tax);
			$request->setLocationCode($LocationCode);
			//$request->setCommit(FALSE);
			if($commit_status == 0) $request->setCommit(FALSE);
			else $request->setCommit(TRUE);

			//Add Origin Address
			$origin = new Address();
			$origin->setAddressCode(0);
			$origin->setLine1($OrigAddress);
			$origin->setLine2("");
			$origin->setCity($OrigCity);
			$origin->setRegion($OrigRegion);
			$origin->setPostalCode($OrigPostalCode);
			$origin->setCountry($OrigCountry);
			$request->setOriginAddress($origin);

			// Add Destination Address
			$destination = new Address();
			$destination->setAddressCode(1);
			$destination->setLine1($DestAddress);
			$destination->setLine2("");
			$destination->setCity($DestCity);
			$destination->setRegion($DestRegion);
			$destination->setPostalCode($DestPostalCode);
			$destination->setCountry($DestCountry);
			$request->setDestinationAddress($destination);

			//
			// Line level processing
			$Ref1 = '';
			$Ref2 = '';
			$ExemptionNo = '';
			$RevAcct = '';
			$EntityUseCode = '';

			$lines = array();
			$product_total = 0;
			$ordertotal = 0;
			$i = 0;
			$status = false;

			//Shipping Line Item
			// Order Totals
			$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_info->row['order_id'] . "' ORDER BY sort_order ASC");

			$shipping_count = 0;

			//Added for discount/Coupon on 05/05/2015
			foreach ($order_total_query->rows as $order_total) {
				if($order_total['code']=="coupon") {
					$Discount = abs($order_total['value']);
					//print_r($order_total);
					$coupon_code = $order_total['title'];
					$coupon_code = substr($coupon_code,8,-1);

					$coupon_id_res = $this->db->query("SELECT coupon_id FROM `" . DB_PREFIX . "coupon` WHERE code = '" . $coupon_code . "'");
					if($coupon_id_res->num_rows != 0){
						$coupon_id = $coupon_id_res->row['coupon_id'];
						//echo "<br>Code: ".$coupon_code." Dis: ".$Discount." Coupon Id: ".$coupon_id;
						$coupon_info_obj = $this->db->query("SELECT DISTINCT * FROM " . DB_PREFIX . "coupon WHERE coupon_id = '" . (int)$coupon_id . "'");
						$coupon_info = $coupon_info_obj->row;
					
						$coupon_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "coupon_product WHERE coupon_id = '" . (int)$coupon_id . "'");

						foreach ($coupon_product_query->rows as $result) {
							$coupon_product_data[] = $result['product_id'];
						}
					}
				}
			}
		
			foreach ($order_total_query->rows as $order_total) {
				if($order_total['code']=="shipping") {
					$code = $order_info->row['shipping_code'];
					$shipping_method = $this->config->get(substr($code,strpos($code, '.')+1,strlen($code)).'_tax_class_id');
					if(isset($shipping_method) && $shipping_method > 0)
					{
					   $TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $shipping_method . "'");
						if($TaxClasses->row['title'] == 'Non Taxable')
						{
							$TaxCode = 'NT';
						}
						else
						{
							$TaxCode = $TaxClasses->row['title'];
						}
					}
					else
					{
						//$TaxCode = 'FR';
						$TaxCode = '';
					}
					$line1 = new Line();
					$line1->setNo($i+1);
					$line1->setItemCode($order_total['code']);
					$line1->setDescription($order_total['title']);
					$line1->setTaxCode($TaxCode);
					$line1->setQty(1);

					//Added for coupon/discount on 05/05/2015
					//If Coupon is applied & free shipping is enabled, we'll pass 0 to free shipping 
					$cost = $order_total['value'];
					//exit;
					if(isset($coupon_info) && !empty($coupon_info))
					{
						if($coupon_info['shipping'])
						{
							$Discount = $Discount - $cost;
							$cost = 0;
						}
					}
					
					$line1->setAmount($cost);
				
					//$line1->setAmount($order_total['value']);
					$line1->setDiscounted(false);
					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
					$shipping_count++;
				}

				if($order_total['code']=="handling") {
					$hadling_total = $this->config->get('handling_total');
					$hadling_tax_class_id = $this->config->get('handling_tax_class_id');
					$hadling_fee = $this->config->get('handling_fee');

					//Added Handling Status in if condition by Vijay Nalawade on 13 Jan 2015. To check if Handling Fee status is enabled or not
					$handling_status = $this->config->get('handling_status');

					if(($ordertotal <= $hadling_total) && ($handling_status==1))
					{
						if($hadling_tax_class_id > 0){
							$TaxClasses = $this->db->query("SELECT title FROM " . DB_PREFIX . "tax_class  WHERE tax_class_id ='" . $hadling_tax_class_id . "'");
							if($TaxClasses->row['title'] == 'Non Taxable')
							{
								$TaxCode = 'NT';
							}
							else
							{
								$TaxCode = $TaxClasses->row['title'];
							}
						}
						else{
							//$TaxCode = 'HNLD';
							$TaxCode = '';
						}
					}
					//$TaxCode = $product["tax_class_id"];
					$line1 = new Line();
					$line1->setNo($i+1);
					$line1->setItemCode($order_total['code']);
					$line1->setDescription($order_total['title']);
					//$line1->setTaxCode($TaxCode);
					$line1->setQty(1);
					$line1->setAmount($order_total['value']);
					$line1->setDiscounted(false);
					$line1->setRevAcct($RevAcct);
					$line1->setRef1($Ref1);
					$line1->setRef2($Ref2);
					$line1->setExemptionNo($ExemptionNo);
					$line1->setCustomerUsageType($EntityUseCode);
					$line1->setOriginAddress($origin);
					$line1->setDestinationAddress($destination);

					$lines[$i] = $line1;
					$i++;
				}
			}

			$avatax_discount_amount = 0;
			$TaxCode = 0;
			//echo "<br>product Info ";
			//print_r($products);

			$lineCount = count($products);
			foreach ($products as $product) {
				//$product_original_amount = $this->getProductOriginalPrice($product["product_id"]);
				$Product_detail = $this->getProductOriginalPrice($product["product_id"]);
				//$product_original_amount = $Product_detail['product_price'];
				//$total_amount = ($product_original_amount * $product["quantity"]);
				$total_amount = $product["total"];
				$Description = $this->getCategories($product["product_id"]);
				if(isset($Product_detail['tax_class_title']) || $Product_detail['tax_class_title']!= null)
				{
					if($Product_detail["tax_class_title"] == 'Non Taxable')
					{
						$TaxCode = 'NT';
					}
					else
					{
						$TaxCode = $Product_detail["tax_class_title"];
					}
				}
				else
				{
					$TaxCode = '';
				}

				//Product Discount
				$this->load->model('catalog/product');
				//$product_discount = $this->model_catalog_product->getProductDiscounts($product["product_id"]);
				$product_discount = $this->model_catalog_product->getProductDiscountsForGivenRange($product["product_id"], $product["quantity"], $order_info->row["date_added"], $order_info->row["customer_group_id"]);

				$discount_count = 0;
				$discount_amount = 0;
				foreach($product_discount as $discount) {
					$discount_amount += $discount["price"];
					$discount_count++;
				}

				$line1 = new Line();
				//$line1->setNo($i+1);//$product["product_id"]
				$line1->setNo($product["product_id"]);

				//UPC Code Added by Vijay as on 3rd Dec 2014. If enabled, UPC code will be passed instead of Model number
				//Changed by Vijay on 26 Dec 2014. Added 50 Characters limitation for Model number & SKU, as CALC service doesn't accept more than 50 characters Item Code.
				if(($this->config->get('config_avatax_product_code')=='UPC') && trim($product["upc"])<>"")
				{
					$line1->setItemCode("UPC:".$product["upc"]);
				}
				elseif(($this->config->get('config_avatax_product_code')=='SKU') && trim($product["sku"])<>"")
				{
					$line1->setItemCode(substr($product["sku"],0,50));
				}
				else
				{
					$line1->setItemCode(substr($product["model"],0,50));
				}

				$line1->setDescription($Description);
				$line1->setTaxCode($TaxCode);
				$line1->setQty($product["quantity"]);
				//$line1->setAmount($product["price"]);
				//$line1->setAmount($product["total"]);
				$line1->setAmount($total_amount);
				/*if($discount_count>0) $line1->setDiscounted(true);
				else $line1->setDiscounted(true);*/

				
				//Added to handle coupon scenario regarding multiple products or order
				if(isset($coupon_id) && ($coupon_id<>""))
				{
					if (!isset($coupon_product_data)) 
					{
						$status = true;
					}
					else 
					{
						if (in_array($product['product_id'], $coupon_product_data)) {
							$status = true;
						} else {
							$status = false;
						}
					}
				}
				
				//echo "\nStatus: ".$status;
				//exit;
				$line1->setDiscounted($status);
				
				$line1->setRevAcct($RevAcct);
				$line1->setRef1($Ref1);
				$line1->setRef2($Ref2);
				$line1->setExemptionNo($ExemptionNo);
				$line1->setCustomerUsageType($EntityUseCode);
				$line1->setOriginAddress($origin);
				$line1->setDestinationAddress($destination);

				$lines[$i] = $line1;
				$i++;
				$ordertotal += $total_amount;
				$product_total += $product['quantity'];
			}

			//$request->setLines(array($lines));
			$request->setLines($lines);
			$request->setDiscount($Discount);

			$GetTaxData = array();
			$returnMessage = "";

			

			try {
			
			if (!empty($DestAddress)) {
            $latency = round(microtime(true) * 1000);
                $getTaxResult = $client->getTax($request);
            $latency = round(microtime(true) * 1000)-$latency;
			$this->session->data['latency'] = "" ;
			$this->session->data['getTaxLines'] = "" ;
			$this->session->data['getDocType'] = "" ;
			$this->session->data['getDocCode'] = "" ;
			$this->session->data['latency'] = $latency ;
			$this->session->data['getTaxLines'] = $getTaxResult->getTaxLines() ;
			$this->session->data['getDocType'] = $getTaxResult->getDocType() ;
			$this->session->data['getDocCode'] = $getTaxResult->getDocCode();

				// Error Trapping
				if ($getTaxResult->getResultCode() == SeverityLevel::$Success) {

					$GetTaxData['GetTaxDocCode'] = $getTaxResult->getDocCode();
					$GetTaxData['GetTaxDocDate'] = $getTaxResult->getDocDate();
					$GetTaxData['GetTaxTotalAmount'] = $getTaxResult->getTotalAmount();
					$GetTaxData['GetTaxTotalTax'] = $getTaxResult->getTotalTax();
					$this->session->data['previous_error_status'] = "Success";
					//return $getTaxResult->getTotalTax();

					/************* Logging code snippet (optional) starts here *******************/
				// System Logger starts here:
				
                $log_mode = $this->config->get('config_avatax_log');
				
                if($log_mode==1){
                   

                    $timeStamp 			= 	new DateTime();						// Create Time Stamp
                    $params				=   '[Input: ' . ']';		// Create Param List
                    $u_name				=	'';							// Eventually will come from $_SESSION[] object

                    // Creating the System Logger Object
                    $application_log 	= 	new SystemLogger;

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastRequest());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    $application_log->AddSystemLog($timeStamp->format('Y-m-d H:i:s'), __FUNCTION__, __CLASS__, __METHOD__, __FILE__, $u_name, $params, $client->__getLastResponse());		// Create System Log
                    $application_log->WriteSystemLogToFile();			// Log info goes to log file

                    //	$application_log->WriteSystemLogToDB();							// Log info goes to DB
                    // 	System Logger ends here
                    //	Logging code snippet (optional) ends here
                }
                else{}
					
					return $GetTaxData;

				} else {

					/*foreach ($getTaxResult->getMessages() as $msg) {
						//echo $msg->getName() . ": " . $msg->getSummary() . "\n";
						$returnMessage .= $msg->getName() . ": " . $msg->getSummary() . "\n";
						$this->session->data['previous_error_status'] = '<b>' ."AvaTax Error :" . '</b>' . $returnMessage;
					}*/
					$msg = $getTaxResult->getMessages();
					$returnMessage .= $msg[0]->getName() . ": " . $msg[0]->getSummary() . "\n";
					$this->session->data['previous_error_status'] = '<b>' ."AvaTax Error :" . '</b>' . $returnMessage;
					return $returnMessage;
				}
				}
			} catch (SoapFault $exception) {
				$msg = "Exception: ";
				if ($exception)
					$msg .= $exception->faultstring;

					// If you desire to retrieve SOAP IN / OUT XML
					//  - Follow directions below
					//  - if not, leave as is

					//echo $msg . "\n";
					return $msg;
					//    }   //UN-comment this line to return SOAP XML
			}   //Comment this line to return SOAP XML
			/**/
		}
				]]></add>
			</operation>		
			<operation><!--Operation doesnt exist in admin,  exist in catalog/model/checkout/order.php-->
				<search position="replace" offset='3'><![CDATA[$this->event->trigger('pre.order.delete', $order_id);]]></search>
				<add><![CDATA[
					$this->event->trigger('pre.order.delete', $order_id);
					if($this->config->get('config_avatax_tax_calculation'))
					{
						//$order_query_delete = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order` WHERE order_status_id > '0' AND order_id = '" . (int)$order_id . "'");

						/*$data["order_status_id"] = 7;
						$products = $this->getOrderProducts($order_query123->row['order_id']);
						$this->AvaTaxChangeDocumentStatus($order_query123, $data, $products);*/
						$this->addOrderHistory($order_id, 7);
					}
					else
					{
						$this->addOrderHistory($order_id, 0);
					}
				]]></add>
			</operation>
			
			<operation><!--Operation doesnt exist in admin,  exist in catalog/model/checkout/order.php-->
				<search position="replace" offset='3'><![CDATA[$this->event->trigger('pre.order.edit', $data);]]></search>
				<add><![CDATA[
					$this->event->trigger('pre.order.edit', $data);
					if($this->config->get('config_avatax_tax_calculation'))
					{
						// Void the order first
						// $this->addOrderHistory($order_id, 0);
					}
					else
					{
						$this->addOrderHistory($order_id, 0);
					}
				]]></add>
			</operation>
			<operation>
				<search position="before" ><![CDATA[public function getOrder($order_id) {]]></search>
				<add><![CDATA[
				public function AvaTaxCancelTax($AvaTaxDocumentCode, $CancelCode) {
				
					$environment = 'Development';	
					if($this->config->get('config_avatax_service_url')=='https://development.avalara.net')
						$environment = "Development";
					else 
						$environment = "Production";				
					
					$order_data = array();
					$dateTime = new DateTime(); 
					$order_data["service_url"] = $this->config->get('config_avatax_service_url');
					$order_data["account"] = $this->config->get('config_avatax_account');
					$order_data["license"] = $this->config->get('config_avatax_license_key');
					$order_data["client"] = $this->config->get('config_avatax_client');
					$order_data["environment"] = $environment;
					$order_data["CompanyCode"] = $this->config->get('config_avatax_company_code');
					$order_data["DocType"] = "SalesInvoice";				
					//$order_data["DocCode"] = $OrderInformation->row['avatax_paytax_document_code'];
					$order_data["DocCode"] = $AvaTaxDocumentCode;
					//$order_data["CancelCode"] = "DocDeleted";
					$order_data["CancelCode"] = $CancelCode;

					include_once(DIR_SYSTEM . 'AvaTax4PHP/cancel_tax.php');				
					$return_message = CancelTax($order_data);
					
					return $return_message;
				}			
				]]></add>
			</operation>		
		</file>	

		<!--<file name="catalog/controller/checkout/manual.php">--><!--File doesn't exist-->
			<!--<operation>
				<search position="before" ><![CDATA[			$json['order_total'] = array();]]></search>
				<add><![CDATA[            $this->config->set('config_avatax_taxcall_flag','1');]]></add>
			</operation>
			<operation>
				<search position="before" offset="2" ><![CDATA[if ($this->request->post['shipping_country_id'] == '') {]]></search>
				<add><![CDATA[ //If we get the error from service. eg. address not valid .we will store the error in json and display it in order_form.tpl
				if($this->session->data['previous_error_status'] != 'Success' && $this->config->get('config_avatax_tax_calculation'))
				{
					$json['error']['avalara'] = $this->session->data['previous_error_status'];
				}]]></add>
			</operation>
		</file>-->
		<!--<file name="admin/view/template/sale/order_form.tpl">
			<operation>
				<search position="before" offset="2" ><![CDATA[if (json['error']['customer']) {]]></search>
				<add><![CDATA[// Avalara Error
					if (json['error']['avalara']) {
						$('.box').before(json['error']['avalara']);
					}]]></add>
			</operation>
		</file>-->
		
		<file name="catalog/controller/api/order.php">
			<operation>
				<search position="replace" offset='2'><![CDATA[$this->model_checkout_order->addOrderHistory($order_id, $this->request->post['order_status_id'], $this->request->post['comment'], $this->request->post['notify']);]]></search>
				<add><![CDATA[$this->model_checkout_order->addOrderHistory($order_id, $this->request->post['order_status_id'], $this->request->post['comment'], $this->request->post['notify']);
					if(isset($this->session->data['previous_error_status']) && ($this->session->data['previous_error_status'] <> 'Success'))
					{
						 $json['success'] = "<font color='red'>".$this->session->data['previous_error_status']."</font>";
					}
					else
					{
						$json['success'] = $this->language->get('text_success');
					}]]></add>
			</operation>

			<operation>
				<search position="replace" offset='2'><![CDATA[$this->model_checkout_order->addOrderHistory($order_id, $order_status_id);]]></search>
				<add><![CDATA[
						$this->model_checkout_order->addOrderHistory($order_id, $order_status_id);
						//Below error will be displayed on edit order save button
						if($this->session->data['previous_error_status'] != 'Success' && $this->config->get('config_avatax_tax_calculation'))
						{
							$json['error'] = $this->session->data['previous_error_status'];
						}
						else
						{
							$json['success'] = $this->language->get('text_success');
						}]]></add>
			</operation>
			
			<operation>
	<search position="after" offset="55"><![CDATA[public function edit() {]]></search>
				<add><![CDATA[				$this->config->set('config_avatax_taxcall_flag','1');]]></add>
			</operation>
			<operation>
				<search position="before"><![CDATA[$this->model_checkout_order->editOrder($order_id, $order_data);]]></search>
				<add><![CDATA[if($this->config->get('config_avatax_tax_calculation'))	{
									$AvaTaxAmount = $order_data['products'][0]['tax'];
						$order_data['total'] = $total + $AvaTaxAmount;

						for($pCnt=0; $pCnt<count($order_data['totals']); $pCnt++)
						{
							if($order_data['totals'][$pCnt]['title']=='Total')
							{
								$order_data['totals'][$pCnt]['value']=$order_data['totals'][$pCnt]['value']+$AvaTaxAmount;
							}
						}

						if(!isset($order_data['totals']['tax']))
						{
							$order_data['totals'][]=array("code" => 'tax',
								"title" => "Total Tax",
								"value" => $AvaTaxAmount,
								"sort_order" => 5);
						}
						$order_data['products'][0]['tax'] = 0;
					}]]></add>
			</operation>
			<operation>
				<search position="after" offset="2"><![CDATA[$this->model_checkout_order->editOrder($order_id, $order_data);]]></search>
				<add><![CDATA[
					//Display Avalara error for sales order after save order
					if($this->session->data['previous_error_status'] == 'Success')
					{
						$json['success'] = $this->language->get('text_success');
					}
					else
					{
						unset($this->session->data['success']);
						$this->session->data['warning'] = $this->session->data['previous_error_status'];
					}]]></add>
			</operation>
			</file>
			<file name="admin/controller/sale/order.php">
			<operation>
				<search position="before"><![CDATA[if (isset($this->session->data['success'])) {]]></search>
				<add><![CDATA[
					//Display Avalara error for sales order after save order
					if(isset($this->session->data['warning']))
					{
						$json['error_warning'] = $this->session->data['warning'];
						unset($this->session->data['warning']);
					}]]></add>
			</operation>
	</file>
		<file name="catalog/controller/api/cart.php">
			<operation>
				<search position="before"><![CDATA[$taxes = $this->cart->getTaxes();]]></search>
				<add><![CDATA[$this->config->set('config_avatax_taxcall_flag','1');]]></add>
			</operation>
		</file>
		<file name="catalog/model/total/coupon.php">
			<operation>
				<search position="after" offset="2" ><![CDATA[$discount_total += $discount;]]></search>
				<add><![CDATA[// AvaTax Discount for Coupon
				$this->session->data['coupon_amount'] = $discount_total ;
				$this->session->data['coupon_info'] = $coupon_info ;				]]></add>
			</operation>
		</file>
<file name="admin/view/template/sale/order_form.tpl">
	<operation>
		<search position="before" offset="6" ><![CDATA[$('input[name=\'coupon\']').parent().parent().parent().addClass('has-error');]]></search>
		<add><![CDATA[$('#button-refresh').trigger('click');]]></add>
	</operation>
</file>

		</modification>

